// Code generated by protoc-gen-go.
// source: betting.proto
// DO NOT EDIT!

/*
Package betting is a generated protocol buffer package.

It is generated from these files:
	betting.proto

It has these top-level messages:
	MarketBook
	UpdateInstructionReport
	PriceProjection
	VenueResult
	CancelInstruction
	UpdateInstruction
	MarketFilter
	ClearedOrderSummaryReport
	ItemDescription
	Match
	ExchangePrices
	PlaceExecutionReport
	CountryCodeResult
	CompetitionResult
	PlaceInstructionReport
	PlaceInstruction
	MarketCatalogue
	MarketProfitAndLoss
	EventType
	CurrentOrderSummary
	ExBestOffersOverrides
	CurrentOrderSummaryReport
	MarketOnCloseOrder
	ReplaceExecutionReport
	EventResult
	UpdateExecutionReport
	MarketDescription
	TimeRangeResult
	RunnerProfitAndLoss
	LimitOnCloseOrder
	CancelExecutionReport
	MarketRates
	RunnerCatalog
	LimitOrder
	CancelInstructionReport
	PriceSize
	StartingPrices
	MarketTypeResult
	MarketLicence
	ClearedOrderSummary
	Event
	Order
	TimeRange
	MarketLineRangeInfo
	ReplaceInstructionReport
	EventTypeResult
	RunnerId
	Runner
	Competition
	ReplaceInstruction
	RequestBody
*/
package betting

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MarketBettingType int32

const (
	MarketBettingType_ODDS                       MarketBettingType = 0
	MarketBettingType_LINE                       MarketBettingType = 1
	MarketBettingType_RANGE                      MarketBettingType = 2
	MarketBettingType_ASIAN_HANDICAP_DOUBLE_LINE MarketBettingType = 3
	MarketBettingType_ASIAN_HANDICAP_SINGLE_LINE MarketBettingType = 4
	MarketBettingType_FIXED_ODDS                 MarketBettingType = 5
)

var MarketBettingType_name = map[int32]string{
	0: "ODDS",
	1: "LINE",
	2: "RANGE",
	3: "ASIAN_HANDICAP_DOUBLE_LINE",
	4: "ASIAN_HANDICAP_SINGLE_LINE",
	5: "FIXED_ODDS",
}
var MarketBettingType_value = map[string]int32{
	"ODDS":  0,
	"LINE":  1,
	"RANGE": 2,
	"ASIAN_HANDICAP_DOUBLE_LINE": 3,
	"ASIAN_HANDICAP_SINGLE_LINE": 4,
	"FIXED_ODDS":                 5,
}

func (x MarketBettingType) String() string {
	return proto.EnumName(MarketBettingType_name, int32(x))
}
func (MarketBettingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Exception int32

const (
	Exception_TOO_MUCH_DATA               Exception = 0
	Exception_INVALID_INPUT_DATA          Exception = 1
	Exception_INVALID_SESSION_INFORMATION Exception = 2
	Exception_NO_APP_KEY                  Exception = 3
	Exception_NO_SESSION                  Exception = 4
	Exception_UNEXPECTED_ERROR            Exception = 5
	Exception_INVALID_APP_KEY             Exception = 6
	Exception_TOO_MANY_REQUESTS           Exception = 7
	Exception_SERVICE_BUSY                Exception = 8
	Exception_TIMEOUT_ERROR               Exception = 9
	Exception_REQUEST_SIZE_EXCEEDS_LIMIT  Exception = 10
	Exception_ACCESS_DENIED               Exception = 11
)

var Exception_name = map[int32]string{
	0:  "TOO_MUCH_DATA",
	1:  "INVALID_INPUT_DATA",
	2:  "INVALID_SESSION_INFORMATION",
	3:  "NO_APP_KEY",
	4:  "NO_SESSION",
	5:  "UNEXPECTED_ERROR",
	6:  "INVALID_APP_KEY",
	7:  "TOO_MANY_REQUESTS",
	8:  "SERVICE_BUSY",
	9:  "TIMEOUT_ERROR",
	10: "REQUEST_SIZE_EXCEEDS_LIMIT",
	11: "ACCESS_DENIED",
}
var Exception_value = map[string]int32{
	"TOO_MUCH_DATA":               0,
	"INVALID_INPUT_DATA":          1,
	"INVALID_SESSION_INFORMATION": 2,
	"NO_APP_KEY":                  3,
	"NO_SESSION":                  4,
	"UNEXPECTED_ERROR":            5,
	"INVALID_APP_KEY":             6,
	"TOO_MANY_REQUESTS":           7,
	"SERVICE_BUSY":                8,
	"TIMEOUT_ERROR":               9,
	"REQUEST_SIZE_EXCEEDS_LIMIT":  10,
	"ACCESS_DENIED":               11,
}

func (x Exception) String() string {
	return proto.EnumName(Exception_name, int32(x))
}
func (Exception) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BetStatus int32

const (
	BetStatus_SETTLED   BetStatus = 0
	BetStatus_VOIDED    BetStatus = 1
	BetStatus_LAPSED    BetStatus = 2
	BetStatus_CANCELLED BetStatus = 3
)

var BetStatus_name = map[int32]string{
	0: "SETTLED",
	1: "VOIDED",
	2: "LAPSED",
	3: "CANCELLED",
}
var BetStatus_value = map[string]int32{
	"SETTLED":   0,
	"VOIDED":    1,
	"LAPSED":    2,
	"CANCELLED": 3,
}

func (x BetStatus) String() string {
	return proto.EnumName(BetStatus_name, int32(x))
}
func (BetStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Side int32

const (
	Side_BACK Side = 0
	Side_LAY  Side = 1
)

var Side_name = map[int32]string{
	0: "BACK",
	1: "LAY",
}
var Side_value = map[string]int32{
	"BACK": 0,
	"LAY":  1,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}
func (Side) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SortDir int32

const (
	SortDir_EARLIEST_TO_LATEST SortDir = 0
	SortDir_LATEST_TO_EARLIEST SortDir = 1
)

var SortDir_name = map[int32]string{
	0: "EARLIEST_TO_LATEST",
	1: "LATEST_TO_EARLIEST",
}
var SortDir_value = map[string]int32{
	"EARLIEST_TO_LATEST": 0,
	"LATEST_TO_EARLIEST": 1,
}

func (x SortDir) String() string {
	return proto.EnumName(SortDir_name, int32(x))
}
func (SortDir) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type MarketType int32

const (
	MarketType_UNUSED               MarketType = 0
	MarketType_WINNER               MarketType = 1
	MarketType_SPECIALS_NEXT_MGR    MarketType = 2
	MarketType_SEASON_SPECIALS      MarketType = 3
	MarketType_GRAND_SLAM_SPECIALS  MarketType = 4
	MarketType_UNDIFFERENTIATED     MarketType = 5
	MarketType_TOP_N_FINISH         MarketType = 6
	MarketType_TOURNAMENT_WINNER    MarketType = 7
	MarketType_TOP_WICKETS_TAKER    MarketType = 8
	MarketType_TOP_BATSMAN          MarketType = 9
	MarketType_HOLE_IN_ONE          MarketType = 10
	MarketType_TWO_BALLS            MarketType = 11
	MarketType_OVER_UNDER_05        MarketType = 12
	MarketType_OVER_UNDER_15        MarketType = 13
	MarketType_OVER_UNDER_25        MarketType = 14
	MarketType_OVER_UNDER_35        MarketType = 15
	MarketType_MATCH_ODDS           MarketType = 16
	MarketType_CORRECT_SCORE        MarketType = 17
	MarketType_BOTH_TEAMS_TO_SCORE  MarketType = 18
	MarketType_OVER_UNDER_45        MarketType = 19
	MarketType_BOOKING_ODDS         MarketType = 20
	MarketType_CORNER_ODDS          MarketType = 21
	MarketType_PENALTY_TAKEN        MarketType = 22
	MarketType_ANYTIME_SCORE        MarketType = 23
	MarketType_TEAM_B_1             MarketType = 24
	MarketType_OVER_UNDER_85        MarketType = 25
	MarketType_NEXT_GOAL            MarketType = 26
	MarketType_FIRST_HALF_GOALS_15  MarketType = 27
	MarketType_FIRST_HALF_GOALS_05  MarketType = 28
	MarketType_OVER_UNDER_55        MarketType = 29
	MarketType_HALF_TIME            MarketType = 30
	MarketType_OVER_UNDER_65        MarketType = 31
	MarketType_HALF_TIME_FULL_TIME  MarketType = 32
	MarketType_HALF_TIME_SCORE      MarketType = 33
	MarketType_OVER_UNDER_75        MarketType = 34
	MarketType_DRAW_NO_BET          MarketType = 35
	MarketType_TEAM_A_1             MarketType = 36
	MarketType_DOUBLE_CHANCE        MarketType = 37
	MarketType_FIRST_HALF_GOALS_25  MarketType = 38
	MarketType_ASIAN_HANDICAP       MarketType = 39
	MarketType_FORECAST             MarketType = 40
	MarketType_CORRECT_SCORE2       MarketType = 41
	MarketType_FIRST_GOAL_ODDS      MarketType = 42
	MarketType_ODD_OR_EVEN          MarketType = 43
	MarketType_TEAM_B_2             MarketType = 44
	MarketType_TEAM_A_2             MarketType = 45
	MarketType_CLEAN_SHEET          MarketType = 46
	MarketType_TEAM_A_3             MarketType = 47
	MarketType_TEAM_B_3             MarketType = 48
	MarketType_TEAM_A_WIN_TO_NIL    MarketType = 49
	MarketType_TEAM_B_WIN_TO_NIL    MarketType = 50
	MarketType_WIN_BOTH_HALVES      MarketType = 51
	MarketType_TOTAL_GOALS          MarketType = 52
	MarketType_MATCH_ODDS_UNMANAGED MarketType = 53
	MarketType_TO_WIN_THE_TOSS      MarketType = 54
	MarketType_ANTEPOST_WIN         MarketType = 55
	MarketType_HAT_TRICKED_SCORED   MarketType = 56
	MarketType_OUTRIGHT_WINNER      MarketType = 57
	MarketType_MAKE_THE_CUT         MarketType = 58
	MarketType_SPECIAL              MarketType = 59
)

var MarketType_name = map[int32]string{
	0:  "UNUSED",
	1:  "WINNER",
	2:  "SPECIALS_NEXT_MGR",
	3:  "SEASON_SPECIALS",
	4:  "GRAND_SLAM_SPECIALS",
	5:  "UNDIFFERENTIATED",
	6:  "TOP_N_FINISH",
	7:  "TOURNAMENT_WINNER",
	8:  "TOP_WICKETS_TAKER",
	9:  "TOP_BATSMAN",
	10: "HOLE_IN_ONE",
	11: "TWO_BALLS",
	12: "OVER_UNDER_05",
	13: "OVER_UNDER_15",
	14: "OVER_UNDER_25",
	15: "OVER_UNDER_35",
	16: "MATCH_ODDS",
	17: "CORRECT_SCORE",
	18: "BOTH_TEAMS_TO_SCORE",
	19: "OVER_UNDER_45",
	20: "BOOKING_ODDS",
	21: "CORNER_ODDS",
	22: "PENALTY_TAKEN",
	23: "ANYTIME_SCORE",
	24: "TEAM_B_1",
	25: "OVER_UNDER_85",
	26: "NEXT_GOAL",
	27: "FIRST_HALF_GOALS_15",
	28: "FIRST_HALF_GOALS_05",
	29: "OVER_UNDER_55",
	30: "HALF_TIME",
	31: "OVER_UNDER_65",
	32: "HALF_TIME_FULL_TIME",
	33: "HALF_TIME_SCORE",
	34: "OVER_UNDER_75",
	35: "DRAW_NO_BET",
	36: "TEAM_A_1",
	37: "DOUBLE_CHANCE",
	38: "FIRST_HALF_GOALS_25",
	39: "ASIAN_HANDICAP",
	40: "FORECAST",
	41: "CORRECT_SCORE2",
	42: "FIRST_GOAL_ODDS",
	43: "ODD_OR_EVEN",
	44: "TEAM_B_2",
	45: "TEAM_A_2",
	46: "CLEAN_SHEET",
	47: "TEAM_A_3",
	48: "TEAM_B_3",
	49: "TEAM_A_WIN_TO_NIL",
	50: "TEAM_B_WIN_TO_NIL",
	51: "WIN_BOTH_HALVES",
	52: "TOTAL_GOALS",
	53: "MATCH_ODDS_UNMANAGED",
	54: "TO_WIN_THE_TOSS",
	55: "ANTEPOST_WIN",
	56: "HAT_TRICKED_SCORED",
	57: "OUTRIGHT_WINNER",
	58: "MAKE_THE_CUT",
	59: "SPECIAL",
}
var MarketType_value = map[string]int32{
	"UNUSED":               0,
	"WINNER":               1,
	"SPECIALS_NEXT_MGR":    2,
	"SEASON_SPECIALS":      3,
	"GRAND_SLAM_SPECIALS":  4,
	"UNDIFFERENTIATED":     5,
	"TOP_N_FINISH":         6,
	"TOURNAMENT_WINNER":    7,
	"TOP_WICKETS_TAKER":    8,
	"TOP_BATSMAN":          9,
	"HOLE_IN_ONE":          10,
	"TWO_BALLS":            11,
	"OVER_UNDER_05":        12,
	"OVER_UNDER_15":        13,
	"OVER_UNDER_25":        14,
	"OVER_UNDER_35":        15,
	"MATCH_ODDS":           16,
	"CORRECT_SCORE":        17,
	"BOTH_TEAMS_TO_SCORE":  18,
	"OVER_UNDER_45":        19,
	"BOOKING_ODDS":         20,
	"CORNER_ODDS":          21,
	"PENALTY_TAKEN":        22,
	"ANYTIME_SCORE":        23,
	"TEAM_B_1":             24,
	"OVER_UNDER_85":        25,
	"NEXT_GOAL":            26,
	"FIRST_HALF_GOALS_15":  27,
	"FIRST_HALF_GOALS_05":  28,
	"OVER_UNDER_55":        29,
	"HALF_TIME":            30,
	"OVER_UNDER_65":        31,
	"HALF_TIME_FULL_TIME":  32,
	"HALF_TIME_SCORE":      33,
	"OVER_UNDER_75":        34,
	"DRAW_NO_BET":          35,
	"TEAM_A_1":             36,
	"DOUBLE_CHANCE":        37,
	"FIRST_HALF_GOALS_25":  38,
	"ASIAN_HANDICAP":       39,
	"FORECAST":             40,
	"CORRECT_SCORE2":       41,
	"FIRST_GOAL_ODDS":      42,
	"ODD_OR_EVEN":          43,
	"TEAM_B_2":             44,
	"TEAM_A_2":             45,
	"CLEAN_SHEET":          46,
	"TEAM_A_3":             47,
	"TEAM_B_3":             48,
	"TEAM_A_WIN_TO_NIL":    49,
	"TEAM_B_WIN_TO_NIL":    50,
	"WIN_BOTH_HALVES":      51,
	"TOTAL_GOALS":          52,
	"MATCH_ODDS_UNMANAGED": 53,
	"TO_WIN_THE_TOSS":      54,
	"ANTEPOST_WIN":         55,
	"HAT_TRICKED_SCORED":   56,
	"OUTRIGHT_WINNER":      57,
	"MAKE_THE_CUT":         58,
	"SPECIAL":              59,
}

func (x MarketType) String() string {
	return proto.EnumName(MarketType_name, int32(x))
}
func (MarketType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ExecutionReport int32

const (
	ExecutionReport_SERVICE_UNAVAILABLE             ExecutionReport = 0
	ExecutionReport_BET_ACTION_ERROR                ExecutionReport = 1
	ExecutionReport_BET_IN_PROGRESS                 ExecutionReport = 2
	ExecutionReport_BET_TAKEN_OR_LAPSED             ExecutionReport = 3
	ExecutionReport_CANCELLED_NOT_PLACED            ExecutionReport = 4
	ExecutionReport_DUPLICATE_BETIDS                ExecutionReport = 5
	ExecutionReport_DUPLICATE_TRANSACTION           ExecutionReport = 6
	ExecutionReport_ERROR_IN_ORDER                  ExecutionReport = 7
	ExecutionReport_INVALID_ACCOUNT_STATE           ExecutionReport = 8
	ExecutionReport_INVALID_BACK_LAY_COMBINATION    ExecutionReport = 9
	ExecutionReport_INVALID_BET_ID                  ExecutionReport = 10
	ExecutionReport_INVALID_BET_SIZE                ExecutionReport = 11
	ExecutionReport_INVALID_BID_TYPE                ExecutionReport = 12
	ExecutionReport_INVALID_MARKET_ID               ExecutionReport = 13
	ExecutionReport_INVALID_ODDS                    ExecutionReport = 14
	ExecutionReport_INVALID_ORDER                   ExecutionReport = 15
	ExecutionReport_INVALID_PERSISTENCE_TYPE        ExecutionReport = 16
	ExecutionReport_INVALID_PRICE_EDIT              ExecutionReport = 17
	ExecutionReport_INVALID_RUNNER                  ExecutionReport = 18
	ExecutionReport_INVALID_WALLET_STATUS           ExecutionReport = 19
	ExecutionReport_MARKET_NOT_OPEN_FOR_BSP_BETTING ExecutionReport = 20
	ExecutionReport_MARKET_SUSPENDED                ExecutionReport = 21
	ExecutionReport_PERMISSION_DENIED               ExecutionReport = 22
	ExecutionReport_PROCESSED_WITH_ERRORS           ExecutionReport = 23
	ExecutionReport_REJECTED_BY_REGULATOR           ExecutionReport = 24
	ExecutionReport_RELATED_ACTION_FAILED           ExecutionReport = 25
	ExecutionReport_RUNNER_REMOVED                  ExecutionReport = 26
	ExecutionReport_SUCCESS                         ExecutionReport = 27
	ExecutionReport_FAILURE                         ExecutionReport = 28
	ExecutionReport_TIMEOUT                         ExecutionReport = 29
)

var ExecutionReport_name = map[int32]string{
	0:  "SERVICE_UNAVAILABLE",
	1:  "BET_ACTION_ERROR",
	2:  "BET_IN_PROGRESS",
	3:  "BET_TAKEN_OR_LAPSED",
	4:  "CANCELLED_NOT_PLACED",
	5:  "DUPLICATE_BETIDS",
	6:  "DUPLICATE_TRANSACTION",
	7:  "ERROR_IN_ORDER",
	8:  "INVALID_ACCOUNT_STATE",
	9:  "INVALID_BACK_LAY_COMBINATION",
	10: "INVALID_BET_ID",
	11: "INVALID_BET_SIZE",
	12: "INVALID_BID_TYPE",
	13: "INVALID_MARKET_ID",
	14: "INVALID_ODDS",
	15: "INVALID_ORDER",
	16: "INVALID_PERSISTENCE_TYPE",
	17: "INVALID_PRICE_EDIT",
	18: "INVALID_RUNNER",
	19: "INVALID_WALLET_STATUS",
	20: "MARKET_NOT_OPEN_FOR_BSP_BETTING",
	21: "MARKET_SUSPENDED",
	22: "PERMISSION_DENIED",
	23: "PROCESSED_WITH_ERRORS",
	24: "REJECTED_BY_REGULATOR",
	25: "RELATED_ACTION_FAILED",
	26: "RUNNER_REMOVED",
	27: "SUCCESS",
	28: "FAILURE",
	29: "TIMEOUT",
}
var ExecutionReport_value = map[string]int32{
	"SERVICE_UNAVAILABLE":             0,
	"BET_ACTION_ERROR":                1,
	"BET_IN_PROGRESS":                 2,
	"BET_TAKEN_OR_LAPSED":             3,
	"CANCELLED_NOT_PLACED":            4,
	"DUPLICATE_BETIDS":                5,
	"DUPLICATE_TRANSACTION":           6,
	"ERROR_IN_ORDER":                  7,
	"INVALID_ACCOUNT_STATE":           8,
	"INVALID_BACK_LAY_COMBINATION":    9,
	"INVALID_BET_ID":                  10,
	"INVALID_BET_SIZE":                11,
	"INVALID_BID_TYPE":                12,
	"INVALID_MARKET_ID":               13,
	"INVALID_ODDS":                    14,
	"INVALID_ORDER":                   15,
	"INVALID_PERSISTENCE_TYPE":        16,
	"INVALID_PRICE_EDIT":              17,
	"INVALID_RUNNER":                  18,
	"INVALID_WALLET_STATUS":           19,
	"MARKET_NOT_OPEN_FOR_BSP_BETTING": 20,
	"MARKET_SUSPENDED":                21,
	"PERMISSION_DENIED":               22,
	"PROCESSED_WITH_ERRORS":           23,
	"REJECTED_BY_REGULATOR":           24,
	"RELATED_ACTION_FAILED":           25,
	"RUNNER_REMOVED":                  26,
	"SUCCESS":                         27,
	"FAILURE":                         28,
	"TIMEOUT":                         29,
}

func (x ExecutionReport) String() string {
	return proto.EnumName(ExecutionReport_name, int32(x))
}
func (ExecutionReport) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type OrderType int32

const (
	OrderType_LIMIT           OrderType = 0
	OrderType_MARKET_ON_CLOSE OrderType = 1
	OrderType_LIMIT_ON_CLOSE  OrderType = 2
)

var OrderType_name = map[int32]string{
	0: "LIMIT",
	1: "MARKET_ON_CLOSE",
	2: "LIMIT_ON_CLOSE",
}
var OrderType_value = map[string]int32{
	"LIMIT":           0,
	"MARKET_ON_CLOSE": 1,
	"LIMIT_ON_CLOSE":  2,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type OrderProjection int32

const (
	OrderProjection_ALL                OrderProjection = 0
	OrderProjection_EXECUTABLE         OrderProjection = 1
	OrderProjection_EXECUTION_COMPLETE OrderProjection = 2
)

var OrderProjection_name = map[int32]string{
	0: "ALL",
	1: "EXECUTABLE",
	2: "EXECUTION_COMPLETE",
}
var OrderProjection_value = map[string]int32{
	"ALL":                0,
	"EXECUTABLE":         1,
	"EXECUTION_COMPLETE": 2,
}

func (x OrderProjection) String() string {
	return proto.EnumName(OrderProjection_name, int32(x))
}
func (OrderProjection) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type OrderBy int32

const (
	OrderBy_BY_BET          OrderBy = 0
	OrderBy_BY_MARKET       OrderBy = 1
	OrderBy_BY_MATCH_TIME   OrderBy = 2
	OrderBy_BY_PLACE_TIME   OrderBy = 3
	OrderBy_BY_SETTLED_TIME OrderBy = 4
	OrderBy_BY_VOID_TIME    OrderBy = 5
)

var OrderBy_name = map[int32]string{
	0: "BY_BET",
	1: "BY_MARKET",
	2: "BY_MATCH_TIME",
	3: "BY_PLACE_TIME",
	4: "BY_SETTLED_TIME",
	5: "BY_VOID_TIME",
}
var OrderBy_value = map[string]int32{
	"BY_BET":          0,
	"BY_MARKET":       1,
	"BY_MATCH_TIME":   2,
	"BY_PLACE_TIME":   3,
	"BY_SETTLED_TIME": 4,
	"BY_VOID_TIME":    5,
}

func (x OrderBy) String() string {
	return proto.EnumName(OrderBy_name, int32(x))
}
func (OrderBy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type MarketSort int32

const (
	MarketSort_MINIMUM_TRADED    MarketSort = 0
	MarketSort_MAXIMUM_TRADED    MarketSort = 1
	MarketSort_MINIMUM_AVAILABLE MarketSort = 2
	MarketSort_MAXIMUM_AVAILABLE MarketSort = 3
	MarketSort_FIRST_TO_START    MarketSort = 4
	MarketSort_LAST_TO_START     MarketSort = 5
)

var MarketSort_name = map[int32]string{
	0: "MINIMUM_TRADED",
	1: "MAXIMUM_TRADED",
	2: "MINIMUM_AVAILABLE",
	3: "MAXIMUM_AVAILABLE",
	4: "FIRST_TO_START",
	5: "LAST_TO_START",
}
var MarketSort_value = map[string]int32{
	"MINIMUM_TRADED":    0,
	"MAXIMUM_TRADED":    1,
	"MINIMUM_AVAILABLE": 2,
	"MAXIMUM_AVAILABLE": 3,
	"FIRST_TO_START":    4,
	"LAST_TO_START":     5,
}

func (x MarketSort) String() string {
	return proto.EnumName(MarketSort_name, int32(x))
}
func (MarketSort) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type MarketProjection int32

const (
	MarketProjection_COMPETITION        MarketProjection = 0
	MarketProjection_EVENT              MarketProjection = 1
	MarketProjection_EVENT_TYPE         MarketProjection = 2
	MarketProjection_MARKET_START_TIME  MarketProjection = 3
	MarketProjection_MARKET_DESCRIPTION MarketProjection = 4
	MarketProjection_RUNNER_DESCRIPTION MarketProjection = 5
	MarketProjection_RUNNER_METADATA    MarketProjection = 6
)

var MarketProjection_name = map[int32]string{
	0: "COMPETITION",
	1: "EVENT",
	2: "EVENT_TYPE",
	3: "MARKET_START_TIME",
	4: "MARKET_DESCRIPTION",
	5: "RUNNER_DESCRIPTION",
	6: "RUNNER_METADATA",
}
var MarketProjection_value = map[string]int32{
	"COMPETITION":        0,
	"EVENT":              1,
	"EVENT_TYPE":         2,
	"MARKET_START_TIME":  3,
	"MARKET_DESCRIPTION": 4,
	"RUNNER_DESCRIPTION": 5,
	"RUNNER_METADATA":    6,
}

func (x MarketProjection) String() string {
	return proto.EnumName(MarketProjection_name, int32(x))
}
func (MarketProjection) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type MatchProjection int32

const (
	MatchProjection_NO_ROLLUP              MatchProjection = 0
	MatchProjection_ROLLED_UP_BY_PRICE     MatchProjection = 1
	MatchProjection_ROLLED_UP_BY_AVG_PRICE MatchProjection = 2
)

var MatchProjection_name = map[int32]string{
	0: "NO_ROLLUP",
	1: "ROLLED_UP_BY_PRICE",
	2: "ROLLED_UP_BY_AVG_PRICE",
}
var MatchProjection_value = map[string]int32{
	"NO_ROLLUP":              0,
	"ROLLED_UP_BY_PRICE":     1,
	"ROLLED_UP_BY_AVG_PRICE": 2,
}

func (x MatchProjection) String() string {
	return proto.EnumName(MatchProjection_name, int32(x))
}
func (MatchProjection) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type TimeGranularity int32

const (
	TimeGranularity_DAYS    TimeGranularity = 0
	TimeGranularity_HOURS   TimeGranularity = 1
	TimeGranularity_MINUTES TimeGranularity = 2
)

var TimeGranularity_name = map[int32]string{
	0: "DAYS",
	1: "HOURS",
	2: "MINUTES",
}
var TimeGranularity_value = map[string]int32{
	"DAYS":    0,
	"HOURS":   1,
	"MINUTES": 2,
}

func (x TimeGranularity) String() string {
	return proto.EnumName(TimeGranularity_name, int32(x))
}
func (TimeGranularity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type MarketBook_MarketStatus int32

const (
	MarketBook_INACTIVE  MarketBook_MarketStatus = 0
	MarketBook_OPEN      MarketBook_MarketStatus = 1
	MarketBook_SUSPENDED MarketBook_MarketStatus = 2
	MarketBook_CLOSED    MarketBook_MarketStatus = 3
)

var MarketBook_MarketStatus_name = map[int32]string{
	0: "INACTIVE",
	1: "OPEN",
	2: "SUSPENDED",
	3: "CLOSED",
}
var MarketBook_MarketStatus_value = map[string]int32{
	"INACTIVE":  0,
	"OPEN":      1,
	"SUSPENDED": 2,
	"CLOSED":    3,
}

func (x MarketBook_MarketStatus) String() string {
	return proto.EnumName(MarketBook_MarketStatus_name, int32(x))
}
func (MarketBook_MarketStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type PriceProjection_PriceData int32

const (
	PriceProjection_SP_AVAILABLE   PriceProjection_PriceData = 0
	PriceProjection_SP_TRADED      PriceProjection_PriceData = 1
	PriceProjection_EX_BEST_OFFERS PriceProjection_PriceData = 2
	PriceProjection_EX_ALL_OFFERS  PriceProjection_PriceData = 3
	PriceProjection_EX_TRADED      PriceProjection_PriceData = 4
)

var PriceProjection_PriceData_name = map[int32]string{
	0: "SP_AVAILABLE",
	1: "SP_TRADED",
	2: "EX_BEST_OFFERS",
	3: "EX_ALL_OFFERS",
	4: "EX_TRADED",
}
var PriceProjection_PriceData_value = map[string]int32{
	"SP_AVAILABLE":   0,
	"SP_TRADED":      1,
	"EX_BEST_OFFERS": 2,
	"EX_ALL_OFFERS":  3,
	"EX_TRADED":      4,
}

func (x PriceProjection_PriceData) String() string {
	return proto.EnumName(PriceProjection_PriceData_name, int32(x))
}
func (PriceProjection_PriceData) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type UpdateInstruction_PersistenceType int32

const (
	UpdateInstruction_LAPSE           UpdateInstruction_PersistenceType = 0
	UpdateInstruction_PERSIST         UpdateInstruction_PersistenceType = 1
	UpdateInstruction_MARKET_ON_CLOSE UpdateInstruction_PersistenceType = 2
)

var UpdateInstruction_PersistenceType_name = map[int32]string{
	0: "LAPSE",
	1: "PERSIST",
	2: "MARKET_ON_CLOSE",
}
var UpdateInstruction_PersistenceType_value = map[string]int32{
	"LAPSE":           0,
	"PERSIST":         1,
	"MARKET_ON_CLOSE": 2,
}

func (x UpdateInstruction_PersistenceType) String() string {
	return proto.EnumName(UpdateInstruction_PersistenceType_name, int32(x))
}
func (UpdateInstruction_PersistenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type CurrentOrderSummary_PersistenceType int32

const (
	CurrentOrderSummary_LAPSE           CurrentOrderSummary_PersistenceType = 0
	CurrentOrderSummary_PERSIST         CurrentOrderSummary_PersistenceType = 1
	CurrentOrderSummary_MARKET_ON_CLOSE CurrentOrderSummary_PersistenceType = 2
)

var CurrentOrderSummary_PersistenceType_name = map[int32]string{
	0: "LAPSE",
	1: "PERSIST",
	2: "MARKET_ON_CLOSE",
}
var CurrentOrderSummary_PersistenceType_value = map[string]int32{
	"LAPSE":           0,
	"PERSIST":         1,
	"MARKET_ON_CLOSE": 2,
}

func (x CurrentOrderSummary_PersistenceType) String() string {
	return proto.EnumName(CurrentOrderSummary_PersistenceType_name, int32(x))
}
func (CurrentOrderSummary_PersistenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19, 0}
}

type ExBestOffersOverrides_RollupModel int32

const (
	ExBestOffersOverrides_STAKE             ExBestOffersOverrides_RollupModel = 0
	ExBestOffersOverrides_PAYOUT            ExBestOffersOverrides_RollupModel = 1
	ExBestOffersOverrides_MANAGED_LIABILITY ExBestOffersOverrides_RollupModel = 2
	ExBestOffersOverrides_NONE              ExBestOffersOverrides_RollupModel = 3
)

var ExBestOffersOverrides_RollupModel_name = map[int32]string{
	0: "STAKE",
	1: "PAYOUT",
	2: "MANAGED_LIABILITY",
	3: "NONE",
}
var ExBestOffersOverrides_RollupModel_value = map[string]int32{
	"STAKE":             0,
	"PAYOUT":            1,
	"MANAGED_LIABILITY": 2,
	"NONE":              3,
}

func (x ExBestOffersOverrides_RollupModel) String() string {
	return proto.EnumName(ExBestOffersOverrides_RollupModel_name, int32(x))
}
func (ExBestOffersOverrides_RollupModel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20, 0}
}

type LimitOrder_PersistenceType int32

const (
	LimitOrder_LAPSE           LimitOrder_PersistenceType = 0
	LimitOrder_PERSIST         LimitOrder_PersistenceType = 1
	LimitOrder_MARKET_ON_CLOSE LimitOrder_PersistenceType = 2
)

var LimitOrder_PersistenceType_name = map[int32]string{
	0: "LAPSE",
	1: "PERSIST",
	2: "MARKET_ON_CLOSE",
}
var LimitOrder_PersistenceType_value = map[string]int32{
	"LAPSE":           0,
	"PERSIST":         1,
	"MARKET_ON_CLOSE": 2,
}

func (x LimitOrder_PersistenceType) String() string {
	return proto.EnumName(LimitOrder_PersistenceType_name, int32(x))
}
func (LimitOrder_PersistenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 0}
}

type ClearedOrderSummary_PersistenceType int32

const (
	ClearedOrderSummary_LAPSE           ClearedOrderSummary_PersistenceType = 0
	ClearedOrderSummary_PERSIST         ClearedOrderSummary_PersistenceType = 1
	ClearedOrderSummary_MARKET_ON_CLOSE ClearedOrderSummary_PersistenceType = 2
)

var ClearedOrderSummary_PersistenceType_name = map[int32]string{
	0: "LAPSE",
	1: "PERSIST",
	2: "MARKET_ON_CLOSE",
}
var ClearedOrderSummary_PersistenceType_value = map[string]int32{
	"LAPSE":           0,
	"PERSIST":         1,
	"MARKET_ON_CLOSE": 2,
}

func (x ClearedOrderSummary_PersistenceType) String() string {
	return proto.EnumName(ClearedOrderSummary_PersistenceType_name, int32(x))
}
func (ClearedOrderSummary_PersistenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39, 0}
}

type Order_PersistenceType int32

const (
	Order_LAPSE           Order_PersistenceType = 0
	Order_PERSIST         Order_PersistenceType = 1
	Order_MARKET_ON_CLOSE Order_PersistenceType = 2
)

var Order_PersistenceType_name = map[int32]string{
	0: "LAPSE",
	1: "PERSIST",
	2: "MARKET_ON_CLOSE",
}
var Order_PersistenceType_value = map[string]int32{
	"LAPSE":           0,
	"PERSIST":         1,
	"MARKET_ON_CLOSE": 2,
}

func (x Order_PersistenceType) String() string {
	return proto.EnumName(Order_PersistenceType_name, int32(x))
}
func (Order_PersistenceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0} }

type Runner_RunnerStatus int32

const (
	Runner_ACTIVE         Runner_RunnerStatus = 0
	Runner_WINNER         Runner_RunnerStatus = 1
	Runner_LOSER          Runner_RunnerStatus = 2
	Runner_REMOVED_VACANT Runner_RunnerStatus = 3
	Runner_REMOVED        Runner_RunnerStatus = 4
	Runner_HIDDEN         Runner_RunnerStatus = 5
)

var Runner_RunnerStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "WINNER",
	2: "LOSER",
	3: "REMOVED_VACANT",
	4: "REMOVED",
	5: "HIDDEN",
}
var Runner_RunnerStatus_value = map[string]int32{
	"ACTIVE":         0,
	"WINNER":         1,
	"LOSER":          2,
	"REMOVED_VACANT": 3,
	"REMOVED":        4,
	"HIDDEN":         5,
}

func (x Runner_RunnerStatus) String() string {
	return proto.EnumName(Runner_RunnerStatus_name, int32(x))
}
func (Runner_RunnerStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{47, 0} }

type MarketBook struct {
	MarketId              string                     `protobuf:"bytes,1,opt,name=marketId" json:"marketId,omitempty"`
	IsMarketDataDelayed   bool                       `protobuf:"varint,2,opt,name=isMarketDataDelayed" json:"isMarketDataDelayed,omitempty"`
	Status                MarketBook_MarketStatus    `protobuf:"varint,3,opt,name=status,enum=betting.MarketBook_MarketStatus" json:"status,omitempty"`
	BetDelay              int32                      `protobuf:"varint,4,opt,name=betDelay" json:"betDelay,omitempty"`
	BspReconciled         bool                       `protobuf:"varint,5,opt,name=bspReconciled" json:"bspReconciled,omitempty"`
	Complete              bool                       `protobuf:"varint,6,opt,name=complete" json:"complete,omitempty"`
	Inplay                bool                       `protobuf:"varint,7,opt,name=inplay" json:"inplay,omitempty"`
	NumberOfWinners       int32                      `protobuf:"varint,8,opt,name=numberOfWinners" json:"numberOfWinners,omitempty"`
	NumberOfRunners       int32                      `protobuf:"varint,9,opt,name=numberOfRunners" json:"numberOfRunners,omitempty"`
	NumberOfActiveRunners int32                      `protobuf:"varint,10,opt,name=numberOfActiveRunners" json:"numberOfActiveRunners,omitempty"`
	LastMatchTime         *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=lastMatchTime" json:"lastMatchTime,omitempty"`
	TotalMatched          float64                    `protobuf:"fixed64,12,opt,name=totalMatched" json:"totalMatched,omitempty"`
	TotalAvailable        float64                    `protobuf:"fixed64,13,opt,name=totalAvailable" json:"totalAvailable,omitempty"`
	CrossMatching         bool                       `protobuf:"varint,14,opt,name=crossMatching" json:"crossMatching,omitempty"`
	RunnersVoidable       bool                       `protobuf:"varint,15,opt,name=runnersVoidable" json:"runnersVoidable,omitempty"`
	Version               int64                      `protobuf:"varint,16,opt,name=version" json:"version,omitempty"`
	Runners               []*Runner                  `protobuf:"bytes,17,rep,name=runners" json:"runners,omitempty"`
}

func (m *MarketBook) Reset()                    { *m = MarketBook{} }
func (m *MarketBook) String() string            { return proto.CompactTextString(m) }
func (*MarketBook) ProtoMessage()               {}
func (*MarketBook) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MarketBook) GetLastMatchTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastMatchTime
	}
	return nil
}

func (m *MarketBook) GetRunners() []*Runner {
	if m != nil {
		return m.Runners
	}
	return nil
}

type UpdateInstructionReport struct {
	Status      ExecutionReport    `protobuf:"varint,1,opt,name=status,enum=betting.ExecutionReport" json:"status,omitempty"`
	ErrorCode   ExecutionReport    `protobuf:"varint,2,opt,name=errorCode,enum=betting.ExecutionReport" json:"errorCode,omitempty"`
	Instruction *UpdateInstruction `protobuf:"bytes,3,opt,name=instruction" json:"instruction,omitempty"`
}

func (m *UpdateInstructionReport) Reset()                    { *m = UpdateInstructionReport{} }
func (m *UpdateInstructionReport) String() string            { return proto.CompactTextString(m) }
func (*UpdateInstructionReport) ProtoMessage()               {}
func (*UpdateInstructionReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateInstructionReport) GetInstruction() *UpdateInstruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

type PriceProjection struct {
	PriceData             []PriceProjection_PriceData `protobuf:"varint,1,rep,name=priceData,enum=betting.PriceProjection_PriceData" json:"priceData,omitempty"`
	ExBestOffersOverrides *ExBestOffersOverrides      `protobuf:"bytes,2,opt,name=exBestOffersOverrides" json:"exBestOffersOverrides,omitempty"`
	Virtualise            bool                        `protobuf:"varint,3,opt,name=virtualise" json:"virtualise,omitempty"`
	RolloverStakes        bool                        `protobuf:"varint,4,opt,name=rolloverStakes" json:"rolloverStakes,omitempty"`
}

func (m *PriceProjection) Reset()                    { *m = PriceProjection{} }
func (m *PriceProjection) String() string            { return proto.CompactTextString(m) }
func (*PriceProjection) ProtoMessage()               {}
func (*PriceProjection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PriceProjection) GetExBestOffersOverrides() *ExBestOffersOverrides {
	if m != nil {
		return m.ExBestOffersOverrides
	}
	return nil
}

type VenueResult struct {
	Venue       string `protobuf:"bytes,1,opt,name=venue" json:"venue,omitempty"`
	MarketCount int32  `protobuf:"varint,2,opt,name=marketCount" json:"marketCount,omitempty"`
}

func (m *VenueResult) Reset()                    { *m = VenueResult{} }
func (m *VenueResult) String() string            { return proto.CompactTextString(m) }
func (*VenueResult) ProtoMessage()               {}
func (*VenueResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CancelInstruction struct {
	BetId         string  `protobuf:"bytes,1,opt,name=betId" json:"betId,omitempty"`
	SizeReduction float64 `protobuf:"fixed64,2,opt,name=sizeReduction" json:"sizeReduction,omitempty"`
}

func (m *CancelInstruction) Reset()                    { *m = CancelInstruction{} }
func (m *CancelInstruction) String() string            { return proto.CompactTextString(m) }
func (*CancelInstruction) ProtoMessage()               {}
func (*CancelInstruction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type UpdateInstruction struct {
	BetId              string                            `protobuf:"bytes,1,opt,name=betId" json:"betId,omitempty"`
	NewPersistenceType UpdateInstruction_PersistenceType `protobuf:"varint,2,opt,name=newPersistenceType,enum=betting.UpdateInstruction_PersistenceType" json:"newPersistenceType,omitempty"`
}

func (m *UpdateInstruction) Reset()                    { *m = UpdateInstruction{} }
func (m *UpdateInstruction) String() string            { return proto.CompactTextString(m) }
func (*UpdateInstruction) ProtoMessage()               {}
func (*UpdateInstruction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type MarketFilter struct {
	TextQuery          string              `protobuf:"bytes,1,opt,name=textQuery" json:"textQuery,omitempty"`
	ExchangeIds        []int32             `protobuf:"varint,2,rep,name=exchangeIds" json:"exchangeIds,omitempty"`
	EventTypeIds       []int32             `protobuf:"varint,3,rep,name=eventTypeIds" json:"eventTypeIds,omitempty"`
	EventIds           []int32             `protobuf:"varint,4,rep,name=eventIds" json:"eventIds,omitempty"`
	CompetitionIds     []int32             `protobuf:"varint,5,rep,name=competitionIds" json:"competitionIds,omitempty"`
	MarketIds          []int32             `protobuf:"varint,6,rep,name=marketIds" json:"marketIds,omitempty"`
	Venues             []int32             `protobuf:"varint,7,rep,name=venues" json:"venues,omitempty"`
	BspOnly            bool                `protobuf:"varint,8,opt,name=bspOnly" json:"bspOnly,omitempty"`
	TurnInPlayEnabled  bool                `protobuf:"varint,9,opt,name=turnInPlayEnabled" json:"turnInPlayEnabled,omitempty"`
	InPlayOnly         bool                `protobuf:"varint,10,opt,name=inPlayOnly" json:"inPlayOnly,omitempty"`
	MarketBettingTypes []MarketBettingType `protobuf:"varint,11,rep,name=marketBettingTypes,enum=betting.MarketBettingType" json:"marketBettingTypes,omitempty"`
	MarketCountries    []int32             `protobuf:"varint,12,rep,name=marketCountries" json:"marketCountries,omitempty"`
	MarketTypeCodes    []MarketType        `protobuf:"varint,13,rep,name=marketTypeCodes,enum=betting.MarketType" json:"marketTypeCodes,omitempty"`
	MarketStartTime    *TimeRange          `protobuf:"bytes,14,opt,name=marketStartTime" json:"marketStartTime,omitempty"`
	WithOrders         []OrderProjection   `protobuf:"varint,15,rep,name=withOrders,enum=betting.OrderProjection" json:"withOrders,omitempty"`
}

func (m *MarketFilter) Reset()                    { *m = MarketFilter{} }
func (m *MarketFilter) String() string            { return proto.CompactTextString(m) }
func (*MarketFilter) ProtoMessage()               {}
func (*MarketFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MarketFilter) GetMarketStartTime() *TimeRange {
	if m != nil {
		return m.MarketStartTime
	}
	return nil
}

type ClearedOrderSummaryReport struct {
	ClearedOrders []*ClearedOrderSummary `protobuf:"bytes,1,rep,name=clearedOrders" json:"clearedOrders,omitempty"`
	MoreAvailable bool                   `protobuf:"varint,2,opt,name=moreAvailable" json:"moreAvailable,omitempty"`
}

func (m *ClearedOrderSummaryReport) Reset()                    { *m = ClearedOrderSummaryReport{} }
func (m *ClearedOrderSummaryReport) String() string            { return proto.CompactTextString(m) }
func (*ClearedOrderSummaryReport) ProtoMessage()               {}
func (*ClearedOrderSummaryReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ClearedOrderSummaryReport) GetClearedOrders() []*ClearedOrderSummary {
	if m != nil {
		return m.ClearedOrders
	}
	return nil
}

type ItemDescription struct {
	EventTypeDesc   string                     `protobuf:"bytes,1,opt,name=eventTypeDesc" json:"eventTypeDesc,omitempty"`
	EventDesc       string                     `protobuf:"bytes,2,opt,name=eventDesc" json:"eventDesc,omitempty"`
	MarketDesc      string                     `protobuf:"bytes,3,opt,name=marketDesc" json:"marketDesc,omitempty"`
	MarketType      MarketType                 `protobuf:"varint,4,opt,name=marketType,enum=betting.MarketType" json:"marketType,omitempty"`
	MarketStartTime *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=marketStartTime" json:"marketStartTime,omitempty"`
	RunnerDesc      string                     `protobuf:"bytes,6,opt,name=runnerDesc" json:"runnerDesc,omitempty"`
	NumberOfWinners int32                      `protobuf:"varint,7,opt,name=numberOfWinners" json:"numberOfWinners,omitempty"`
	EachWayDivisor  float64                    `protobuf:"fixed64,8,opt,name=eachWayDivisor" json:"eachWayDivisor,omitempty"`
}

func (m *ItemDescription) Reset()                    { *m = ItemDescription{} }
func (m *ItemDescription) String() string            { return proto.CompactTextString(m) }
func (*ItemDescription) ProtoMessage()               {}
func (*ItemDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ItemDescription) GetMarketStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.MarketStartTime
	}
	return nil
}

type Match struct {
	BetId     string                     `protobuf:"bytes,1,opt,name=betId" json:"betId,omitempty"`
	MatchId   string                     `protobuf:"bytes,2,opt,name=matchId" json:"matchId,omitempty"`
	Side      Side                       `protobuf:"varint,3,opt,name=side,enum=betting.Side" json:"side,omitempty"`
	Price     float64                    `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	Size      float64                    `protobuf:"fixed64,5,opt,name=size" json:"size,omitempty"`
	MatchDate *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=matchDate" json:"matchDate,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Match) GetMatchDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.MatchDate
	}
	return nil
}

type ExchangePrices struct {
	AvailableToBack []*PriceSize `protobuf:"bytes,1,rep,name=availableToBack" json:"availableToBack,omitempty"`
	AvailableToLay  []*PriceSize `protobuf:"bytes,2,rep,name=availableToLay" json:"availableToLay,omitempty"`
	TradedVolume    []*PriceSize `protobuf:"bytes,3,rep,name=tradedVolume" json:"tradedVolume,omitempty"`
}

func (m *ExchangePrices) Reset()                    { *m = ExchangePrices{} }
func (m *ExchangePrices) String() string            { return proto.CompactTextString(m) }
func (*ExchangePrices) ProtoMessage()               {}
func (*ExchangePrices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ExchangePrices) GetAvailableToBack() []*PriceSize {
	if m != nil {
		return m.AvailableToBack
	}
	return nil
}

func (m *ExchangePrices) GetAvailableToLay() []*PriceSize {
	if m != nil {
		return m.AvailableToLay
	}
	return nil
}

func (m *ExchangePrices) GetTradedVolume() []*PriceSize {
	if m != nil {
		return m.TradedVolume
	}
	return nil
}

type PlaceExecutionReport struct {
	CustomerRef        string                    `protobuf:"bytes,1,opt,name=customerRef" json:"customerRef,omitempty"`
	Status             ExecutionReport           `protobuf:"varint,2,opt,name=status,enum=betting.ExecutionReport" json:"status,omitempty"`
	ErrorCode          ExecutionReport           `protobuf:"varint,3,opt,name=errorCode,enum=betting.ExecutionReport" json:"errorCode,omitempty"`
	MarketId           string                    `protobuf:"bytes,4,opt,name=marketId" json:"marketId,omitempty"`
	InstructionReports []*PlaceInstructionReport `protobuf:"bytes,5,rep,name=instructionReports" json:"instructionReports,omitempty"`
}

func (m *PlaceExecutionReport) Reset()                    { *m = PlaceExecutionReport{} }
func (m *PlaceExecutionReport) String() string            { return proto.CompactTextString(m) }
func (*PlaceExecutionReport) ProtoMessage()               {}
func (*PlaceExecutionReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PlaceExecutionReport) GetInstructionReports() []*PlaceInstructionReport {
	if m != nil {
		return m.InstructionReports
	}
	return nil
}

type CountryCodeResult struct {
	CountryCode string `protobuf:"bytes,1,opt,name=countryCode" json:"countryCode,omitempty"`
	MarketCount int32  `protobuf:"varint,2,opt,name=marketCount" json:"marketCount,omitempty"`
}

func (m *CountryCodeResult) Reset()                    { *m = CountryCodeResult{} }
func (m *CountryCodeResult) String() string            { return proto.CompactTextString(m) }
func (*CountryCodeResult) ProtoMessage()               {}
func (*CountryCodeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type CompetitionResult struct {
	Competition       *Competition `protobuf:"bytes,1,opt,name=competition" json:"competition,omitempty"`
	MarketCount       int32        `protobuf:"varint,2,opt,name=marketCount" json:"marketCount,omitempty"`
	CompetitionRegion string       `protobuf:"bytes,3,opt,name=competitionRegion" json:"competitionRegion,omitempty"`
}

func (m *CompetitionResult) Reset()                    { *m = CompetitionResult{} }
func (m *CompetitionResult) String() string            { return proto.CompactTextString(m) }
func (*CompetitionResult) ProtoMessage()               {}
func (*CompetitionResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CompetitionResult) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

type PlaceInstructionReport struct {
	Status              ExecutionReport            `protobuf:"varint,1,opt,name=status,enum=betting.ExecutionReport" json:"status,omitempty"`
	ErrorCode           ExecutionReport            `protobuf:"varint,2,opt,name=errorCode,enum=betting.ExecutionReport" json:"errorCode,omitempty"`
	Instruction         *PlaceInstruction          `protobuf:"bytes,3,opt,name=instruction" json:"instruction,omitempty"`
	BetId               string                     `protobuf:"bytes,4,opt,name=betId" json:"betId,omitempty"`
	PlacedDate          *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=placedDate" json:"placedDate,omitempty"`
	AveragePriceMatched float64                    `protobuf:"fixed64,6,opt,name=averagePriceMatched" json:"averagePriceMatched,omitempty"`
	SizeMatched         float64                    `protobuf:"fixed64,7,opt,name=sizeMatched" json:"sizeMatched,omitempty"`
}

func (m *PlaceInstructionReport) Reset()                    { *m = PlaceInstructionReport{} }
func (m *PlaceInstructionReport) String() string            { return proto.CompactTextString(m) }
func (*PlaceInstructionReport) ProtoMessage()               {}
func (*PlaceInstructionReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PlaceInstructionReport) GetInstruction() *PlaceInstruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (m *PlaceInstructionReport) GetPlacedDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.PlacedDate
	}
	return nil
}

type PlaceInstruction struct {
	OrderType          OrderType           `protobuf:"varint,1,opt,name=OrderType,json=orderType,enum=betting.OrderType" json:"OrderType,omitempty"`
	SelectionId        int64               `protobuf:"varint,2,opt,name=selectionId" json:"selectionId,omitempty"`
	Handicap           float64             `protobuf:"fixed64,3,opt,name=handicap" json:"handicap,omitempty"`
	Side               Side                `protobuf:"varint,4,opt,name=side,enum=betting.Side" json:"side,omitempty"`
	LimitOrder         *LimitOrder         `protobuf:"bytes,5,opt,name=limitOrder" json:"limitOrder,omitempty"`
	LimitOnCloseOrder  *LimitOnCloseOrder  `protobuf:"bytes,6,opt,name=limitOnCloseOrder" json:"limitOnCloseOrder,omitempty"`
	MarketOnCloseOrder *MarketOnCloseOrder `protobuf:"bytes,7,opt,name=marketOnCloseOrder" json:"marketOnCloseOrder,omitempty"`
}

func (m *PlaceInstruction) Reset()                    { *m = PlaceInstruction{} }
func (m *PlaceInstruction) String() string            { return proto.CompactTextString(m) }
func (*PlaceInstruction) ProtoMessage()               {}
func (*PlaceInstruction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PlaceInstruction) GetLimitOrder() *LimitOrder {
	if m != nil {
		return m.LimitOrder
	}
	return nil
}

func (m *PlaceInstruction) GetLimitOnCloseOrder() *LimitOnCloseOrder {
	if m != nil {
		return m.LimitOnCloseOrder
	}
	return nil
}

func (m *PlaceInstruction) GetMarketOnCloseOrder() *MarketOnCloseOrder {
	if m != nil {
		return m.MarketOnCloseOrder
	}
	return nil
}

type MarketCatalogue struct {
	MarketId        string                     `protobuf:"bytes,1,opt,name=marketId" json:"marketId,omitempty"`
	MarketName      string                     `protobuf:"bytes,2,opt,name=marketName" json:"marketName,omitempty"`
	MarketStartTime *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=marketStartTime" json:"marketStartTime,omitempty"`
	Description     *MarketDescription         `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	TotalMatched    float64                    `protobuf:"fixed64,5,opt,name=totalMatched" json:"totalMatched,omitempty"`
	Runners         []*RunnerCatalog           `protobuf:"bytes,6,rep,name=runners" json:"runners,omitempty"`
	EventType       *EventType                 `protobuf:"bytes,7,opt,name=eventType" json:"eventType,omitempty"`
	Competition     *Competition               `protobuf:"bytes,8,opt,name=competition" json:"competition,omitempty"`
	Event           *Event                     `protobuf:"bytes,9,opt,name=event" json:"event,omitempty"`
}

func (m *MarketCatalogue) Reset()                    { *m = MarketCatalogue{} }
func (m *MarketCatalogue) String() string            { return proto.CompactTextString(m) }
func (*MarketCatalogue) ProtoMessage()               {}
func (*MarketCatalogue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MarketCatalogue) GetMarketStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.MarketStartTime
	}
	return nil
}

func (m *MarketCatalogue) GetDescription() *MarketDescription {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *MarketCatalogue) GetRunners() []*RunnerCatalog {
	if m != nil {
		return m.Runners
	}
	return nil
}

func (m *MarketCatalogue) GetEventType() *EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (m *MarketCatalogue) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *MarketCatalogue) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type MarketProfitAndLoss struct {
	MarketId          string                 `protobuf:"bytes,1,opt,name=marketId" json:"marketId,omitempty"`
	CommissionApplied float64                `protobuf:"fixed64,2,opt,name=commissionApplied" json:"commissionApplied,omitempty"`
	ProfitAndLosses   []*RunnerProfitAndLoss `protobuf:"bytes,3,rep,name=profitAndLosses" json:"profitAndLosses,omitempty"`
}

func (m *MarketProfitAndLoss) Reset()                    { *m = MarketProfitAndLoss{} }
func (m *MarketProfitAndLoss) String() string            { return proto.CompactTextString(m) }
func (*MarketProfitAndLoss) ProtoMessage()               {}
func (*MarketProfitAndLoss) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *MarketProfitAndLoss) GetProfitAndLosses() []*RunnerProfitAndLoss {
	if m != nil {
		return m.ProfitAndLosses
	}
	return nil
}

type EventType struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *EventType) Reset()                    { *m = EventType{} }
func (m *EventType) String() string            { return proto.CompactTextString(m) }
func (*EventType) ProtoMessage()               {}
func (*EventType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type CurrentOrderSummary struct {
	BetId               string                              `protobuf:"bytes,1,opt,name=betId" json:"betId,omitempty"`
	MarketId            string                              `protobuf:"bytes,2,opt,name=marketId" json:"marketId,omitempty"`
	SelectionId         int64                               `protobuf:"varint,3,opt,name=selectionId" json:"selectionId,omitempty"`
	Handicap            float64                             `protobuf:"fixed64,4,opt,name=handicap" json:"handicap,omitempty"`
	PriceSize           *PriceSize                          `protobuf:"bytes,5,opt,name=priceSize" json:"priceSize,omitempty"`
	BspLiability        float64                             `protobuf:"fixed64,6,opt,name=bspLiability" json:"bspLiability,omitempty"`
	Side                Side                                `protobuf:"varint,7,opt,name=side,enum=betting.Side" json:"side,omitempty"`
	Status              OrderProjection                     `protobuf:"varint,8,opt,name=status,enum=betting.OrderProjection" json:"status,omitempty"`
	PersistenceType     CurrentOrderSummary_PersistenceType `protobuf:"varint,9,opt,name=persistenceType,enum=betting.CurrentOrderSummary_PersistenceType" json:"persistenceType,omitempty"`
	OrderType           OrderType                           `protobuf:"varint,10,opt,name=OrderType,json=orderType,enum=betting.OrderType" json:"OrderType,omitempty"`
	PlacedDate          *google_protobuf.Timestamp          `protobuf:"bytes,11,opt,name=placedDate" json:"placedDate,omitempty"`
	MatchedDate         *google_protobuf.Timestamp          `protobuf:"bytes,12,opt,name=matchedDate" json:"matchedDate,omitempty"`
	AveragePriceMatched float64                             `protobuf:"fixed64,13,opt,name=averagePriceMatched" json:"averagePriceMatched,omitempty"`
	SizeMatched         float64                             `protobuf:"fixed64,14,opt,name=sizeMatched" json:"sizeMatched,omitempty"`
	SizeRemaining       float64                             `protobuf:"fixed64,15,opt,name=sizeRemaining" json:"sizeRemaining,omitempty"`
	SizeLapsed          float64                             `protobuf:"fixed64,16,opt,name=sizeLapsed" json:"sizeLapsed,omitempty"`
	SizeCancelled       float64                             `protobuf:"fixed64,17,opt,name=sizeCancelled" json:"sizeCancelled,omitempty"`
	SizeVoided          float64                             `protobuf:"fixed64,18,opt,name=sizeVoided" json:"sizeVoided,omitempty"`
	RegulatorAuthCode   string                              `protobuf:"bytes,19,opt,name=regulatorAuthCode" json:"regulatorAuthCode,omitempty"`
	RegulatorCode       string                              `protobuf:"bytes,20,opt,name=regulatorCode" json:"regulatorCode,omitempty"`
}

func (m *CurrentOrderSummary) Reset()                    { *m = CurrentOrderSummary{} }
func (m *CurrentOrderSummary) String() string            { return proto.CompactTextString(m) }
func (*CurrentOrderSummary) ProtoMessage()               {}
func (*CurrentOrderSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CurrentOrderSummary) GetPriceSize() *PriceSize {
	if m != nil {
		return m.PriceSize
	}
	return nil
}

func (m *CurrentOrderSummary) GetPlacedDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.PlacedDate
	}
	return nil
}

func (m *CurrentOrderSummary) GetMatchedDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.MatchedDate
	}
	return nil
}

type ExBestOffersOverrides struct {
	BestPricesDepth          int32                             `protobuf:"varint,1,opt,name=bestPricesDepth" json:"bestPricesDepth,omitempty"`
	RollupModel              ExBestOffersOverrides_RollupModel `protobuf:"varint,2,opt,name=rollupModel,enum=betting.ExBestOffersOverrides_RollupModel" json:"rollupModel,omitempty"`
	RollupLimit              int32                             `protobuf:"varint,3,opt,name=rollupLimit" json:"rollupLimit,omitempty"`
	RollupLiabilityThreshold float64                           `protobuf:"fixed64,4,opt,name=rollupLiabilityThreshold" json:"rollupLiabilityThreshold,omitempty"`
	RollupLiabilityFactor    int32                             `protobuf:"varint,5,opt,name=rollupLiabilityFactor" json:"rollupLiabilityFactor,omitempty"`
}

func (m *ExBestOffersOverrides) Reset()                    { *m = ExBestOffersOverrides{} }
func (m *ExBestOffersOverrides) String() string            { return proto.CompactTextString(m) }
func (*ExBestOffersOverrides) ProtoMessage()               {}
func (*ExBestOffersOverrides) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type CurrentOrderSummaryReport struct {
	CurrentOrders []*CurrentOrderSummary `protobuf:"bytes,1,rep,name=currentOrders" json:"currentOrders,omitempty"`
	MoreAvailable bool                   `protobuf:"varint,3,opt,name=moreAvailable" json:"moreAvailable,omitempty"`
}

func (m *CurrentOrderSummaryReport) Reset()                    { *m = CurrentOrderSummaryReport{} }
func (m *CurrentOrderSummaryReport) String() string            { return proto.CompactTextString(m) }
func (*CurrentOrderSummaryReport) ProtoMessage()               {}
func (*CurrentOrderSummaryReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CurrentOrderSummaryReport) GetCurrentOrders() []*CurrentOrderSummary {
	if m != nil {
		return m.CurrentOrders
	}
	return nil
}

type MarketOnCloseOrder struct {
	Liability float64 `protobuf:"fixed64,1,opt,name=liability" json:"liability,omitempty"`
}

func (m *MarketOnCloseOrder) Reset()                    { *m = MarketOnCloseOrder{} }
func (m *MarketOnCloseOrder) String() string            { return proto.CompactTextString(m) }
func (*MarketOnCloseOrder) ProtoMessage()               {}
func (*MarketOnCloseOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type ReplaceExecutionReport struct {
	CustomerRef        string                      `protobuf:"bytes,1,opt,name=customerRef" json:"customerRef,omitempty"`
	Status             ExecutionReport             `protobuf:"varint,2,opt,name=status,enum=betting.ExecutionReport" json:"status,omitempty"`
	ErrorCode          ExecutionReport             `protobuf:"varint,3,opt,name=errorCode,enum=betting.ExecutionReport" json:"errorCode,omitempty"`
	MarketId           string                      `protobuf:"bytes,4,opt,name=marketId" json:"marketId,omitempty"`
	InstructionReports []*ReplaceInstructionReport `protobuf:"bytes,5,rep,name=instructionReports" json:"instructionReports,omitempty"`
}

func (m *ReplaceExecutionReport) Reset()                    { *m = ReplaceExecutionReport{} }
func (m *ReplaceExecutionReport) String() string            { return proto.CompactTextString(m) }
func (*ReplaceExecutionReport) ProtoMessage()               {}
func (*ReplaceExecutionReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ReplaceExecutionReport) GetInstructionReports() []*ReplaceInstructionReport {
	if m != nil {
		return m.InstructionReports
	}
	return nil
}

type EventResult struct {
	Event       *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	MarketCount int32  `protobuf:"varint,2,opt,name=marketCount" json:"marketCount,omitempty"`
}

func (m *EventResult) Reset()                    { *m = EventResult{} }
func (m *EventResult) String() string            { return proto.CompactTextString(m) }
func (*EventResult) ProtoMessage()               {}
func (*EventResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *EventResult) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type UpdateExecutionReport struct {
	CustomerRef        string                     `protobuf:"bytes,1,opt,name=customerRef" json:"customerRef,omitempty"`
	Status             ExecutionReport            `protobuf:"varint,2,opt,name=status,enum=betting.ExecutionReport" json:"status,omitempty"`
	ErrorCode          ExecutionReport            `protobuf:"varint,3,opt,name=errorCode,enum=betting.ExecutionReport" json:"errorCode,omitempty"`
	MarketId           string                     `protobuf:"bytes,4,opt,name=marketId" json:"marketId,omitempty"`
	InstructionReports []*UpdateInstructionReport `protobuf:"bytes,5,rep,name=instructionReports" json:"instructionReports,omitempty"`
}

func (m *UpdateExecutionReport) Reset()                    { *m = UpdateExecutionReport{} }
func (m *UpdateExecutionReport) String() string            { return proto.CompactTextString(m) }
func (*UpdateExecutionReport) ProtoMessage()               {}
func (*UpdateExecutionReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *UpdateExecutionReport) GetInstructionReports() []*UpdateInstructionReport {
	if m != nil {
		return m.InstructionReports
	}
	return nil
}

type MarketDescription struct {
	PersistenceEnabled bool                       `protobuf:"varint,1,opt,name=persistenceEnabled" json:"persistenceEnabled,omitempty"`
	BspMarket          bool                       `protobuf:"varint,2,opt,name=bspMarket" json:"bspMarket,omitempty"`
	MarketTime         *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=marketTime" json:"marketTime,omitempty"`
	SuspendTime        *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=suspendTime" json:"suspendTime,omitempty"`
	SettleTime         *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=settleTime" json:"settleTime,omitempty"`
	BettingType        MarketBettingType          `protobuf:"varint,6,opt,name=bettingType,enum=betting.MarketBettingType" json:"bettingType,omitempty"`
	TurnInPlayEnabled  bool                       `protobuf:"varint,7,opt,name=turnInPlayEnabled" json:"turnInPlayEnabled,omitempty"`
	MarketType         string                     `protobuf:"bytes,8,opt,name=marketType" json:"marketType,omitempty"`
	Regulator          string                     `protobuf:"bytes,9,opt,name=regulator" json:"regulator,omitempty"`
	MarketBaseRate     float64                    `protobuf:"fixed64,10,opt,name=marketBaseRate" json:"marketBaseRate,omitempty"`
	DiscountAllowed    bool                       `protobuf:"varint,11,opt,name=discountAllowed" json:"discountAllowed,omitempty"`
	Wallet             string                     `protobuf:"bytes,12,opt,name=wallet" json:"wallet,omitempty"`
	Rules              string                     `protobuf:"bytes,13,opt,name=rules" json:"rules,omitempty"`
	RulesHasDate       bool                       `protobuf:"varint,14,opt,name=rulesHasDate" json:"rulesHasDate,omitempty"`
	Clarifications     string                     `protobuf:"bytes,15,opt,name=clarifications" json:"clarifications,omitempty"`
}

func (m *MarketDescription) Reset()                    { *m = MarketDescription{} }
func (m *MarketDescription) String() string            { return proto.CompactTextString(m) }
func (*MarketDescription) ProtoMessage()               {}
func (*MarketDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *MarketDescription) GetMarketTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.MarketTime
	}
	return nil
}

func (m *MarketDescription) GetSuspendTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.SuspendTime
	}
	return nil
}

func (m *MarketDescription) GetSettleTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.SettleTime
	}
	return nil
}

type TimeRangeResult struct {
	TimeRange   *TimeRange `protobuf:"bytes,1,opt,name=timeRange" json:"timeRange,omitempty"`
	MarketCount int32      `protobuf:"varint,2,opt,name=marketCount" json:"marketCount,omitempty"`
}

func (m *TimeRangeResult) Reset()                    { *m = TimeRangeResult{} }
func (m *TimeRangeResult) String() string            { return proto.CompactTextString(m) }
func (*TimeRangeResult) ProtoMessage()               {}
func (*TimeRangeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *TimeRangeResult) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

type RunnerProfitAndLoss struct {
	SelectionId string  `protobuf:"bytes,1,opt,name=selectionId" json:"selectionId,omitempty"`
	IfWin       float64 `protobuf:"fixed64,2,opt,name=ifWin" json:"ifWin,omitempty"`
	IfLose      float64 `protobuf:"fixed64,3,opt,name=ifLose" json:"ifLose,omitempty"`
	IfPlace     float64 `protobuf:"fixed64,4,opt,name=ifPlace" json:"ifPlace,omitempty"`
}

func (m *RunnerProfitAndLoss) Reset()                    { *m = RunnerProfitAndLoss{} }
func (m *RunnerProfitAndLoss) String() string            { return proto.CompactTextString(m) }
func (*RunnerProfitAndLoss) ProtoMessage()               {}
func (*RunnerProfitAndLoss) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type LimitOnCloseOrder struct {
	Liability float64 `protobuf:"fixed64,1,opt,name=liability" json:"liability,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
}

func (m *LimitOnCloseOrder) Reset()                    { *m = LimitOnCloseOrder{} }
func (m *LimitOnCloseOrder) String() string            { return proto.CompactTextString(m) }
func (*LimitOnCloseOrder) ProtoMessage()               {}
func (*LimitOnCloseOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type CancelExecutionReport struct {
	CustomerRef        string                     `protobuf:"bytes,1,opt,name=customerRef" json:"customerRef,omitempty"`
	Status             ExecutionReport            `protobuf:"varint,2,opt,name=status,enum=betting.ExecutionReport" json:"status,omitempty"`
	ErrorCode          ExecutionReport            `protobuf:"varint,3,opt,name=errorCode,enum=betting.ExecutionReport" json:"errorCode,omitempty"`
	MarketId           string                     `protobuf:"bytes,4,opt,name=marketId" json:"marketId,omitempty"`
	InstructionReports []*CancelInstructionReport `protobuf:"bytes,5,rep,name=instructionReports" json:"instructionReports,omitempty"`
}

func (m *CancelExecutionReport) Reset()                    { *m = CancelExecutionReport{} }
func (m *CancelExecutionReport) String() string            { return proto.CompactTextString(m) }
func (*CancelExecutionReport) ProtoMessage()               {}
func (*CancelExecutionReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CancelExecutionReport) GetInstructionReports() []*CancelInstructionReport {
	if m != nil {
		return m.InstructionReports
	}
	return nil
}

type MarketRates struct {
	MarketBaseRate  float64 `protobuf:"fixed64,1,opt,name=marketBaseRate" json:"marketBaseRate,omitempty"`
	DiscountAllowed bool    `protobuf:"varint,2,opt,name=discountAllowed" json:"discountAllowed,omitempty"`
}

func (m *MarketRates) Reset()                    { *m = MarketRates{} }
func (m *MarketRates) String() string            { return proto.CompactTextString(m) }
func (*MarketRates) ProtoMessage()               {}
func (*MarketRates) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type RunnerCatalog struct {
	SelectionId  int64             `protobuf:"varint,1,opt,name=selectionId" json:"selectionId,omitempty"`
	RunnerName   string            `protobuf:"bytes,2,opt,name=runnerName" json:"runnerName,omitempty"`
	Handicap     float64           `protobuf:"fixed64,3,opt,name=handicap" json:"handicap,omitempty"`
	SortPriority int32             `protobuf:"varint,4,opt,name=sortPriority" json:"sortPriority,omitempty"`
	Metadata     map[string]string `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RunnerCatalog) Reset()                    { *m = RunnerCatalog{} }
func (m *RunnerCatalog) String() string            { return proto.CompactTextString(m) }
func (*RunnerCatalog) ProtoMessage()               {}
func (*RunnerCatalog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *RunnerCatalog) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type LimitOrder struct {
	Size            float64                    `protobuf:"fixed64,1,opt,name=size" json:"size,omitempty"`
	Price           float64                    `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
	PersistenceType LimitOrder_PersistenceType `protobuf:"varint,3,opt,name=persistenceType,enum=betting.LimitOrder_PersistenceType" json:"persistenceType,omitempty"`
}

func (m *LimitOrder) Reset()                    { *m = LimitOrder{} }
func (m *LimitOrder) String() string            { return proto.CompactTextString(m) }
func (*LimitOrder) ProtoMessage()               {}
func (*LimitOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type CancelInstructionReport struct {
	Status        ExecutionReport            `protobuf:"varint,1,opt,name=status,enum=betting.ExecutionReport" json:"status,omitempty"`
	ErrorCode     ExecutionReport            `protobuf:"varint,2,opt,name=errorCode,enum=betting.ExecutionReport" json:"errorCode,omitempty"`
	Instruction   *CancelInstruction         `protobuf:"bytes,3,opt,name=instruction" json:"instruction,omitempty"`
	SizeCancelled float64                    `protobuf:"fixed64,4,opt,name=sizeCancelled" json:"sizeCancelled,omitempty"`
	CancelledDate *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=cancelledDate" json:"cancelledDate,omitempty"`
}

func (m *CancelInstructionReport) Reset()                    { *m = CancelInstructionReport{} }
func (m *CancelInstructionReport) String() string            { return proto.CompactTextString(m) }
func (*CancelInstructionReport) ProtoMessage()               {}
func (*CancelInstructionReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CancelInstructionReport) GetInstruction() *CancelInstruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (m *CancelInstructionReport) GetCancelledDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CancelledDate
	}
	return nil
}

type PriceSize struct {
	Price float64 `protobuf:"fixed64,1,opt,name=price" json:"price,omitempty"`
	Size  float64 `protobuf:"fixed64,2,opt,name=size" json:"size,omitempty"`
}

func (m *PriceSize) Reset()                    { *m = PriceSize{} }
func (m *PriceSize) String() string            { return proto.CompactTextString(m) }
func (*PriceSize) ProtoMessage()               {}
func (*PriceSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type StartingPrices struct {
	NearPrice         float64      `protobuf:"fixed64,1,opt,name=nearPrice" json:"nearPrice,omitempty"`
	FarPrice          float64      `protobuf:"fixed64,2,opt,name=farPrice" json:"farPrice,omitempty"`
	BackStakeTaken    []*PriceSize `protobuf:"bytes,3,rep,name=backStakeTaken" json:"backStakeTaken,omitempty"`
	LayLiabilityTaken []*PriceSize `protobuf:"bytes,4,rep,name=layLiabilityTaken" json:"layLiabilityTaken,omitempty"`
	ActualSP          float64      `protobuf:"fixed64,5,opt,name=actualSP" json:"actualSP,omitempty"`
}

func (m *StartingPrices) Reset()                    { *m = StartingPrices{} }
func (m *StartingPrices) String() string            { return proto.CompactTextString(m) }
func (*StartingPrices) ProtoMessage()               {}
func (*StartingPrices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *StartingPrices) GetBackStakeTaken() []*PriceSize {
	if m != nil {
		return m.BackStakeTaken
	}
	return nil
}

func (m *StartingPrices) GetLayLiabilityTaken() []*PriceSize {
	if m != nil {
		return m.LayLiabilityTaken
	}
	return nil
}

type MarketTypeResult struct {
	MarketType  MarketType `protobuf:"varint,1,opt,name=marketType,enum=betting.MarketType" json:"marketType,omitempty"`
	MarketCount int32      `protobuf:"varint,2,opt,name=marketCount" json:"marketCount,omitempty"`
}

func (m *MarketTypeResult) Reset()                    { *m = MarketTypeResult{} }
func (m *MarketTypeResult) String() string            { return proto.CompactTextString(m) }
func (*MarketTypeResult) ProtoMessage()               {}
func (*MarketTypeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

type MarketLicence struct {
	Wallet         string `protobuf:"bytes,1,opt,name=wallet" json:"wallet,omitempty"`
	Rules          string `protobuf:"bytes,2,opt,name=rules" json:"rules,omitempty"`
	RulesHasDate   bool   `protobuf:"varint,3,opt,name=rulesHasDate" json:"rulesHasDate,omitempty"`
	Clarifications string `protobuf:"bytes,4,opt,name=clarifications" json:"clarifications,omitempty"`
}

func (m *MarketLicence) Reset()                    { *m = MarketLicence{} }
func (m *MarketLicence) String() string            { return proto.CompactTextString(m) }
func (*MarketLicence) ProtoMessage()               {}
func (*MarketLicence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

type ClearedOrderSummary struct {
	EventTypeId     string                              `protobuf:"bytes,1,opt,name=eventTypeId" json:"eventTypeId,omitempty"`
	EventId         string                              `protobuf:"bytes,2,opt,name=eventId" json:"eventId,omitempty"`
	MarketId        string                              `protobuf:"bytes,3,opt,name=marketId" json:"marketId,omitempty"`
	SelectionId     string                              `protobuf:"bytes,4,opt,name=selectionId" json:"selectionId,omitempty"`
	Handicap        float64                             `protobuf:"fixed64,5,opt,name=handicap" json:"handicap,omitempty"`
	BetId           string                              `protobuf:"bytes,6,opt,name=betId" json:"betId,omitempty"`
	PlacedDate      *google_protobuf.Timestamp          `protobuf:"bytes,7,opt,name=placedDate" json:"placedDate,omitempty"`
	PersistenceType ClearedOrderSummary_PersistenceType `protobuf:"varint,8,opt,name=persistenceType,enum=betting.ClearedOrderSummary_PersistenceType" json:"persistenceType,omitempty"`
	OrderType       OrderType                           `protobuf:"varint,9,opt,name=orderType,enum=betting.OrderType" json:"orderType,omitempty"`
	Side            Side                                `protobuf:"varint,10,opt,name=side,enum=betting.Side" json:"side,omitempty"`
	ItemDescription *ItemDescription                    `protobuf:"bytes,11,opt,name=itemDescription" json:"itemDescription,omitempty"`
	PriceRequested  float64                             `protobuf:"fixed64,12,opt,name=priceRequested" json:"priceRequested,omitempty"`
	SettledDate     *google_protobuf.Timestamp          `protobuf:"bytes,13,opt,name=settledDate" json:"settledDate,omitempty"`
	BetCount        int32                               `protobuf:"varint,14,opt,name=betCount" json:"betCount,omitempty"`
	Commission      float64                             `protobuf:"fixed64,15,opt,name=commission" json:"commission,omitempty"`
	PriceMatched    float64                             `protobuf:"fixed64,16,opt,name=priceMatched" json:"priceMatched,omitempty"`
	PriceReduced    bool                                `protobuf:"varint,17,opt,name=priceReduced" json:"priceReduced,omitempty"`
	SizeSettled     float64                             `protobuf:"fixed64,18,opt,name=sizeSettled" json:"sizeSettled,omitempty"`
	Profit          float64                             `protobuf:"fixed64,19,opt,name=profit" json:"profit,omitempty"`
	SizeCancelled   float64                             `protobuf:"fixed64,20,opt,name=sizeCancelled" json:"sizeCancelled,omitempty"`
}

func (m *ClearedOrderSummary) Reset()                    { *m = ClearedOrderSummary{} }
func (m *ClearedOrderSummary) String() string            { return proto.CompactTextString(m) }
func (*ClearedOrderSummary) ProtoMessage()               {}
func (*ClearedOrderSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ClearedOrderSummary) GetPlacedDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.PlacedDate
	}
	return nil
}

func (m *ClearedOrderSummary) GetItemDescription() *ItemDescription {
	if m != nil {
		return m.ItemDescription
	}
	return nil
}

func (m *ClearedOrderSummary) GetSettledDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.SettledDate
	}
	return nil
}

type Event struct {
	Id          string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CountryCode string                     `protobuf:"bytes,3,opt,name=countryCode" json:"countryCode,omitempty"`
	Timezone    string                     `protobuf:"bytes,4,opt,name=timezone" json:"timezone,omitempty"`
	Venue       string                     `protobuf:"bytes,5,opt,name=venue" json:"venue,omitempty"`
	OpenDate    *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=openDate" json:"openDate,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Event) GetOpenDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.OpenDate
	}
	return nil
}

type Order struct {
	BetId           string                     `protobuf:"bytes,1,opt,name=betId" json:"betId,omitempty"`
	OrderType       OrderType                  `protobuf:"varint,2,opt,name=OrderType,json=orderType,enum=betting.OrderType" json:"OrderType,omitempty"`
	Status          OrderProjection            `protobuf:"varint,3,opt,name=status,enum=betting.OrderProjection" json:"status,omitempty"`
	PersistenceType Order_PersistenceType      `protobuf:"varint,4,opt,name=persistenceType,enum=betting.Order_PersistenceType" json:"persistenceType,omitempty"`
	Side            Side                       `protobuf:"varint,5,opt,name=side,enum=betting.Side" json:"side,omitempty"`
	Price           float64                    `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`
	Size            float64                    `protobuf:"fixed64,7,opt,name=size" json:"size,omitempty"`
	BspLiability    float64                    `protobuf:"fixed64,8,opt,name=bspLiability" json:"bspLiability,omitempty"`
	PlacedDate      *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=placedDate" json:"placedDate,omitempty"`
	AvgPriceMatched float64                    `protobuf:"fixed64,10,opt,name=avgPriceMatched" json:"avgPriceMatched,omitempty"`
	SizeMatched     float64                    `protobuf:"fixed64,11,opt,name=sizeMatched" json:"sizeMatched,omitempty"`
	SizeRemaining   float64                    `protobuf:"fixed64,12,opt,name=sizeRemaining" json:"sizeRemaining,omitempty"`
	SizeLapsed      float64                    `protobuf:"fixed64,13,opt,name=sizeLapsed" json:"sizeLapsed,omitempty"`
	SizeCancelled   float64                    `protobuf:"fixed64,14,opt,name=sizeCancelled" json:"sizeCancelled,omitempty"`
	SizeVoided      float64                    `protobuf:"fixed64,15,opt,name=sizeVoided" json:"sizeVoided,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *Order) GetPlacedDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.PlacedDate
	}
	return nil
}

type TimeRange struct {
	From *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To   *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *TimeRange) GetFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TimeRange) GetTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type MarketLineRangeInfo struct {
	MaxUnitValue float64 `protobuf:"fixed64,1,opt,name=maxUnitValue" json:"maxUnitValue,omitempty"`
	MinUnitValue float64 `protobuf:"fixed64,2,opt,name=minUnitValue" json:"minUnitValue,omitempty"`
	Interval     float64 `protobuf:"fixed64,3,opt,name=interval" json:"interval,omitempty"`
	MarketUnit   string  `protobuf:"bytes,4,opt,name=marketUnit" json:"marketUnit,omitempty"`
}

func (m *MarketLineRangeInfo) Reset()                    { *m = MarketLineRangeInfo{} }
func (m *MarketLineRangeInfo) String() string            { return proto.CompactTextString(m) }
func (*MarketLineRangeInfo) ProtoMessage()               {}
func (*MarketLineRangeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

type ReplaceInstructionReport struct {
	Status                  ExecutionReport          `protobuf:"varint,1,opt,name=status,enum=betting.ExecutionReport" json:"status,omitempty"`
	ErrorCode               ExecutionReport          `protobuf:"varint,2,opt,name=errorCode,enum=betting.ExecutionReport" json:"errorCode,omitempty"`
	CancelInstructionReport *CancelInstructionReport `protobuf:"bytes,3,opt,name=cancelInstructionReport" json:"cancelInstructionReport,omitempty"`
	PlaceInstructionReport  *PlaceInstructionReport  `protobuf:"bytes,4,opt,name=placeInstructionReport" json:"placeInstructionReport,omitempty"`
}

func (m *ReplaceInstructionReport) Reset()                    { *m = ReplaceInstructionReport{} }
func (m *ReplaceInstructionReport) String() string            { return proto.CompactTextString(m) }
func (*ReplaceInstructionReport) ProtoMessage()               {}
func (*ReplaceInstructionReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ReplaceInstructionReport) GetCancelInstructionReport() *CancelInstructionReport {
	if m != nil {
		return m.CancelInstructionReport
	}
	return nil
}

func (m *ReplaceInstructionReport) GetPlaceInstructionReport() *PlaceInstructionReport {
	if m != nil {
		return m.PlaceInstructionReport
	}
	return nil
}

type EventTypeResult struct {
	EventType   *EventType `protobuf:"bytes,1,opt,name=eventType" json:"eventType,omitempty"`
	MarketCount int32      `protobuf:"varint,2,opt,name=marketCount" json:"marketCount,omitempty"`
}

func (m *EventTypeResult) Reset()                    { *m = EventTypeResult{} }
func (m *EventTypeResult) String() string            { return proto.CompactTextString(m) }
func (*EventTypeResult) ProtoMessage()               {}
func (*EventTypeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *EventTypeResult) GetEventType() *EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

type RunnerId struct {
	MarketId    string  `protobuf:"bytes,1,opt,name=marketId" json:"marketId,omitempty"`
	SelectionId string  `protobuf:"bytes,2,opt,name=selectionId" json:"selectionId,omitempty"`
	Handicap    float64 `protobuf:"fixed64,3,opt,name=handicap" json:"handicap,omitempty"`
}

func (m *RunnerId) Reset()                    { *m = RunnerId{} }
func (m *RunnerId) String() string            { return proto.CompactTextString(m) }
func (*RunnerId) ProtoMessage()               {}
func (*RunnerId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

type Runner struct {
	SelectionId      int64                      `protobuf:"varint,1,opt,name=selectionId" json:"selectionId,omitempty"`
	Handicap         float64                    `protobuf:"fixed64,2,opt,name=handicap" json:"handicap,omitempty"`
	Status           Runner_RunnerStatus        `protobuf:"varint,3,opt,name=status,enum=betting.Runner_RunnerStatus" json:"status,omitempty"`
	AdjustmentFactor float64                    `protobuf:"fixed64,4,opt,name=adjustmentFactor" json:"adjustmentFactor,omitempty"`
	LastPriceTraded  float64                    `protobuf:"fixed64,5,opt,name=lastPriceTraded" json:"lastPriceTraded,omitempty"`
	TotalMatched     float64                    `protobuf:"fixed64,6,opt,name=totalMatched" json:"totalMatched,omitempty"`
	RemovalDate      *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=removalDate" json:"removalDate,omitempty"`
	Sp               *StartingPrices            `protobuf:"bytes,8,opt,name=sp" json:"sp,omitempty"`
	Ex               *ExchangePrices            `protobuf:"bytes,9,opt,name=ex" json:"ex,omitempty"`
	Orders           []*Order                   `protobuf:"bytes,10,rep,name=orders" json:"orders,omitempty"`
	Matches          []*Match                   `protobuf:"bytes,11,rep,name=matches" json:"matches,omitempty"`
}

func (m *Runner) Reset()                    { *m = Runner{} }
func (m *Runner) String() string            { return proto.CompactTextString(m) }
func (*Runner) ProtoMessage()               {}
func (*Runner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *Runner) GetRemovalDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.RemovalDate
	}
	return nil
}

func (m *Runner) GetSp() *StartingPrices {
	if m != nil {
		return m.Sp
	}
	return nil
}

func (m *Runner) GetEx() *ExchangePrices {
	if m != nil {
		return m.Ex
	}
	return nil
}

func (m *Runner) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *Runner) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Competition struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Competition) Reset()                    { *m = Competition{} }
func (m *Competition) String() string            { return proto.CompactTextString(m) }
func (*Competition) ProtoMessage()               {}
func (*Competition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

type ReplaceInstruction struct {
	BetId    string  `protobuf:"bytes,1,opt,name=betId" json:"betId,omitempty"`
	NewPrice float64 `protobuf:"fixed64,2,opt,name=newPrice" json:"newPrice,omitempty"`
}

func (m *ReplaceInstruction) Reset()                    { *m = ReplaceInstruction{} }
func (m *ReplaceInstruction) String() string            { return proto.CompactTextString(m) }
func (*ReplaceInstruction) ProtoMessage()               {}
func (*ReplaceInstruction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

type RequestBody struct {
	Filter           *MarketFilter      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Locale           string             `protobuf:"bytes,2,opt,name=locale" json:"locale,omitempty"`
	MarketProjection []MarketProjection `protobuf:"varint,3,rep,name=marketProjection,enum=betting.MarketProjection" json:"marketProjection,omitempty"`
	Sort             MarketSort         `protobuf:"varint,4,opt,name=sort,enum=betting.MarketSort" json:"sort,omitempty"`
	MaxResults       int32              `protobuf:"varint,5,opt,name=maxResults" json:"maxResults,omitempty"`
	Granularity      TimeGranularity    `protobuf:"varint,6,opt,name=granularity,enum=betting.TimeGranularity" json:"granularity,omitempty"`
}

func (m *RequestBody) Reset()                    { *m = RequestBody{} }
func (m *RequestBody) String() string            { return proto.CompactTextString(m) }
func (*RequestBody) ProtoMessage()               {}
func (*RequestBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *RequestBody) GetFilter() *MarketFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func init() {
	proto.RegisterType((*MarketBook)(nil), "betting.MarketBook")
	proto.RegisterType((*UpdateInstructionReport)(nil), "betting.UpdateInstructionReport")
	proto.RegisterType((*PriceProjection)(nil), "betting.PriceProjection")
	proto.RegisterType((*VenueResult)(nil), "betting.VenueResult")
	proto.RegisterType((*CancelInstruction)(nil), "betting.CancelInstruction")
	proto.RegisterType((*UpdateInstruction)(nil), "betting.UpdateInstruction")
	proto.RegisterType((*MarketFilter)(nil), "betting.MarketFilter")
	proto.RegisterType((*ClearedOrderSummaryReport)(nil), "betting.ClearedOrderSummaryReport")
	proto.RegisterType((*ItemDescription)(nil), "betting.ItemDescription")
	proto.RegisterType((*Match)(nil), "betting.Match")
	proto.RegisterType((*ExchangePrices)(nil), "betting.ExchangePrices")
	proto.RegisterType((*PlaceExecutionReport)(nil), "betting.PlaceExecutionReport")
	proto.RegisterType((*CountryCodeResult)(nil), "betting.CountryCodeResult")
	proto.RegisterType((*CompetitionResult)(nil), "betting.CompetitionResult")
	proto.RegisterType((*PlaceInstructionReport)(nil), "betting.PlaceInstructionReport")
	proto.RegisterType((*PlaceInstruction)(nil), "betting.PlaceInstruction")
	proto.RegisterType((*MarketCatalogue)(nil), "betting.MarketCatalogue")
	proto.RegisterType((*MarketProfitAndLoss)(nil), "betting.MarketProfitAndLoss")
	proto.RegisterType((*EventType)(nil), "betting.EventType")
	proto.RegisterType((*CurrentOrderSummary)(nil), "betting.CurrentOrderSummary")
	proto.RegisterType((*ExBestOffersOverrides)(nil), "betting.ExBestOffersOverrides")
	proto.RegisterType((*CurrentOrderSummaryReport)(nil), "betting.CurrentOrderSummaryReport")
	proto.RegisterType((*MarketOnCloseOrder)(nil), "betting.MarketOnCloseOrder")
	proto.RegisterType((*ReplaceExecutionReport)(nil), "betting.ReplaceExecutionReport")
	proto.RegisterType((*EventResult)(nil), "betting.EventResult")
	proto.RegisterType((*UpdateExecutionReport)(nil), "betting.UpdateExecutionReport")
	proto.RegisterType((*MarketDescription)(nil), "betting.MarketDescription")
	proto.RegisterType((*TimeRangeResult)(nil), "betting.TimeRangeResult")
	proto.RegisterType((*RunnerProfitAndLoss)(nil), "betting.RunnerProfitAndLoss")
	proto.RegisterType((*LimitOnCloseOrder)(nil), "betting.LimitOnCloseOrder")
	proto.RegisterType((*CancelExecutionReport)(nil), "betting.CancelExecutionReport")
	proto.RegisterType((*MarketRates)(nil), "betting.MarketRates")
	proto.RegisterType((*RunnerCatalog)(nil), "betting.RunnerCatalog")
	proto.RegisterType((*LimitOrder)(nil), "betting.LimitOrder")
	proto.RegisterType((*CancelInstructionReport)(nil), "betting.CancelInstructionReport")
	proto.RegisterType((*PriceSize)(nil), "betting.PriceSize")
	proto.RegisterType((*StartingPrices)(nil), "betting.StartingPrices")
	proto.RegisterType((*MarketTypeResult)(nil), "betting.MarketTypeResult")
	proto.RegisterType((*MarketLicence)(nil), "betting.MarketLicence")
	proto.RegisterType((*ClearedOrderSummary)(nil), "betting.ClearedOrderSummary")
	proto.RegisterType((*Event)(nil), "betting.Event")
	proto.RegisterType((*Order)(nil), "betting.Order")
	proto.RegisterType((*TimeRange)(nil), "betting.TimeRange")
	proto.RegisterType((*MarketLineRangeInfo)(nil), "betting.MarketLineRangeInfo")
	proto.RegisterType((*ReplaceInstructionReport)(nil), "betting.ReplaceInstructionReport")
	proto.RegisterType((*EventTypeResult)(nil), "betting.EventTypeResult")
	proto.RegisterType((*RunnerId)(nil), "betting.RunnerId")
	proto.RegisterType((*Runner)(nil), "betting.Runner")
	proto.RegisterType((*Competition)(nil), "betting.Competition")
	proto.RegisterType((*ReplaceInstruction)(nil), "betting.ReplaceInstruction")
	proto.RegisterType((*RequestBody)(nil), "betting.RequestBody")
	proto.RegisterEnum("betting.MarketBettingType", MarketBettingType_name, MarketBettingType_value)
	proto.RegisterEnum("betting.Exception", Exception_name, Exception_value)
	proto.RegisterEnum("betting.BetStatus", BetStatus_name, BetStatus_value)
	proto.RegisterEnum("betting.Side", Side_name, Side_value)
	proto.RegisterEnum("betting.SortDir", SortDir_name, SortDir_value)
	proto.RegisterEnum("betting.MarketType", MarketType_name, MarketType_value)
	proto.RegisterEnum("betting.ExecutionReport", ExecutionReport_name, ExecutionReport_value)
	proto.RegisterEnum("betting.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("betting.OrderProjection", OrderProjection_name, OrderProjection_value)
	proto.RegisterEnum("betting.OrderBy", OrderBy_name, OrderBy_value)
	proto.RegisterEnum("betting.MarketSort", MarketSort_name, MarketSort_value)
	proto.RegisterEnum("betting.MarketProjection", MarketProjection_name, MarketProjection_value)
	proto.RegisterEnum("betting.MatchProjection", MatchProjection_name, MatchProjection_value)
	proto.RegisterEnum("betting.TimeGranularity", TimeGranularity_name, TimeGranularity_value)
	proto.RegisterEnum("betting.MarketBook_MarketStatus", MarketBook_MarketStatus_name, MarketBook_MarketStatus_value)
	proto.RegisterEnum("betting.PriceProjection_PriceData", PriceProjection_PriceData_name, PriceProjection_PriceData_value)
	proto.RegisterEnum("betting.UpdateInstruction_PersistenceType", UpdateInstruction_PersistenceType_name, UpdateInstruction_PersistenceType_value)
	proto.RegisterEnum("betting.CurrentOrderSummary_PersistenceType", CurrentOrderSummary_PersistenceType_name, CurrentOrderSummary_PersistenceType_value)
	proto.RegisterEnum("betting.ExBestOffersOverrides_RollupModel", ExBestOffersOverrides_RollupModel_name, ExBestOffersOverrides_RollupModel_value)
	proto.RegisterEnum("betting.LimitOrder_PersistenceType", LimitOrder_PersistenceType_name, LimitOrder_PersistenceType_value)
	proto.RegisterEnum("betting.ClearedOrderSummary_PersistenceType", ClearedOrderSummary_PersistenceType_name, ClearedOrderSummary_PersistenceType_value)
	proto.RegisterEnum("betting.Order_PersistenceType", Order_PersistenceType_name, Order_PersistenceType_value)
	proto.RegisterEnum("betting.Runner_RunnerStatus", Runner_RunnerStatus_name, Runner_RunnerStatus_value)
}

func init() { proto.RegisterFile("betting.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x3b, 0x4d, 0x73, 0x24, 0xc9,
	0x55, 0xdb, 0x5f, 0x92, 0x3a, 0x5b, 0x1f, 0xa5, 0x9a, 0x2f, 0xcd, 0x78, 0xbc, 0x3b, 0xee, 0x5d,
	0xec, 0xb5, 0x58, 0x6b, 0x67, 0x35, 0xab, 0xf5, 0x7a, 0xd7, 0xc0, 0x56, 0x77, 0x97, 0xa4, 0xf2,
	0xf4, 0xd7, 0x66, 0x55, 0x6b, 0x46, 0x7b, 0xa0, 0xa2, 0xa5, 0x2e, 0xcd, 0x94, 0xa7, 0xd5, 0x2d,
	0x77, 0x57, 0xcf, 0xce, 0xf8, 0x42, 0x40, 0x04, 0x07, 0x1f, 0x08, 0xec, 0xe0, 0x04, 0x5c, 0xb8,
	0x01, 0xbf, 0xc0, 0x70, 0x21, 0x02, 0x22, 0x38, 0xf0, 0x03, 0xf8, 0x03, 0x04, 0x5c, 0xb8, 0x71,
	0x23, 0x88, 0x20, 0x82, 0xf7, 0x5e, 0x66, 0x55, 0x65, 0x55, 0x97, 0xa4, 0x5e, 0x36, 0xc2, 0x81,
	0x39, 0x68, 0xa6, 0xf2, 0xe5, 0xcb, 0x57, 0x2f, 0x5f, 0xbe, 0xef, 0xac, 0x66, 0x6b, 0x27, 0x5e,
	0x10, 0xf8, 0xa3, 0x67, 0x3b, 0x17, 0x93, 0x71, 0x30, 0xd6, 0x97, 0xe5, 0xf0, 0xde, 0x5b, 0xcf,
	0xc6, 0xe3, 0x67, 0x43, 0xef, 0x7d, 0x02, 0x9f, 0xcc, 0xce, 0xde, 0x0f, 0xfc, 0x73, 0x6f, 0x1a,
	0xf4, 0xcf, 0x2f, 0x04, 0x66, 0xf5, 0xbf, 0x4a, 0x8c, 0xb5, 0xfa, 0x93, 0x17, 0x5e, 0x50, 0x1b,
	0x8f, 0x5f, 0xe8, 0xf7, 0xd8, 0xca, 0x39, 0x8d, 0xac, 0xc1, 0x56, 0xee, 0x41, 0xee, 0xdd, 0x32,
	0x8f, 0xc6, 0xfa, 0x43, 0x76, 0xc3, 0x9f, 0x0a, 0xdc, 0x46, 0x3f, 0xe8, 0x37, 0xbc, 0x61, 0xff,
	0xb5, 0x37, 0xd8, 0xca, 0x03, 0xda, 0x0a, 0xcf, 0x9a, 0xd2, 0x3f, 0x66, 0x4b, 0xf0, 0xae, 0x60,
	0x36, 0xdd, 0x2a, 0x00, 0xd2, 0xfa, 0xee, 0x83, 0x9d, 0x90, 0xcd, 0xf8, 0x95, 0xf2, 0xd1, 0x26,
	0x3c, 0x2e, 0xf1, 0x91, 0x0f, 0x40, 0x25, 0x3a, 0x5b, 0x45, 0x58, 0x5b, 0xe2, 0xd1, 0x58, 0x7f,
	0x07, 0x76, 0x3b, 0xbd, 0xe0, 0xde, 0xe9, 0x78, 0x74, 0xea, 0x0f, 0x81, 0x83, 0x12, 0x71, 0x90,
	0x04, 0x22, 0x85, 0xd3, 0xf1, 0xf9, 0xc5, 0xd0, 0x0b, 0xbc, 0xad, 0x25, 0x42, 0x88, 0xc6, 0xfa,
	0x6d, 0xb6, 0xe4, 0x8f, 0x2e, 0x90, 0xf6, 0x32, 0xcd, 0xc8, 0x91, 0xfe, 0x2e, 0xdb, 0x18, 0xcd,
	0xce, 0x4f, 0xbc, 0x49, 0xe7, 0xec, 0x89, 0x3f, 0x1a, 0x79, 0x93, 0xe9, 0xd6, 0x0a, 0xbd, 0x3c,
	0x0d, 0x56, 0x31, 0xf9, 0x4c, 0x60, 0x96, 0x93, 0x98, 0x12, 0xac, 0x7f, 0xc8, 0x6e, 0x85, 0x20,
	0xe3, 0x34, 0xf0, 0x5f, 0x7a, 0x21, 0x3e, 0x23, 0xfc, 0xec, 0x49, 0xfd, 0x33, 0xb6, 0x36, 0xec,
	0x4f, 0x83, 0x56, 0x3f, 0x38, 0x7d, 0xee, 0xc0, 0x91, 0x6d, 0x55, 0x00, 0xbb, 0xb2, 0x7b, 0x6f,
	0x47, 0x9c, 0xe7, 0x4e, 0x78, 0x9e, 0x3b, 0x4e, 0x78, 0x9e, 0x3c, 0xb9, 0x40, 0xaf, 0xb2, 0xd5,
	0x60, 0x1c, 0xf4, 0x87, 0x04, 0x01, 0x21, 0xad, 0x02, 0x81, 0x1c, 0x4f, 0xc0, 0xf4, 0x6f, 0xb3,
	0x75, 0x1a, 0x1b, 0x2f, 0xfb, 0xfe, 0xb0, 0x7f, 0x32, 0xf4, 0xb6, 0xd6, 0x08, 0x2b, 0x05, 0x45,
	0x89, 0x9f, 0x4e, 0xc6, 0xd3, 0x29, 0xad, 0x83, 0xe3, 0xdb, 0x5a, 0x17, 0x12, 0x4f, 0x00, 0x51,
	0x26, 0x13, 0xc1, 0xfe, 0xd1, 0xd8, 0x1f, 0x10, 0xb9, 0x0d, 0xc2, 0x4b, 0x83, 0xf5, 0x2d, 0xb6,
	0xfc, 0x12, 0xc6, 0xfe, 0x78, 0xb4, 0xa5, 0x01, 0x46, 0x81, 0x87, 0x43, 0xfd, 0xbb, 0x6c, 0x59,
	0x22, 0x6f, 0x6d, 0x3e, 0x28, 0xc0, 0x8e, 0x37, 0x22, 0x95, 0x11, 0xa2, 0xe1, 0xe1, 0x7c, 0xd5,
	0x60, 0xab, 0xaa, 0xea, 0xe8, 0xab, 0x6c, 0xc5, 0x6a, 0x1b, 0x75, 0xc7, 0x3a, 0x32, 0xb5, 0x37,
	0xf4, 0x15, 0x56, 0xec, 0x74, 0xcd, 0xb6, 0x96, 0xd3, 0xd7, 0x58, 0xd9, 0xee, 0xd9, 0xf0, 0xdc,
	0x30, 0x1b, 0x5a, 0x5e, 0x67, 0x6c, 0xa9, 0xde, 0xec, 0xd8, 0xf0, 0x5c, 0xa8, 0xfe, 0x7d, 0x8e,
	0xdd, 0xe9, 0x5d, 0x0c, 0xfa, 0x81, 0x67, 0x8d, 0xa6, 0xc1, 0x64, 0x06, 0x47, 0x30, 0x1e, 0x71,
	0xef, 0x62, 0x3c, 0x09, 0x40, 0xdb, 0x43, 0xdd, 0xcd, 0x91, 0xee, 0x6e, 0x45, 0x8c, 0x98, 0xaf,
	0xbc, 0xd3, 0x59, 0x8c, 0x19, 0xe9, 0xec, 0x47, 0xac, 0xec, 0x4d, 0x26, 0xe3, 0x49, 0x7d, 0x3c,
	0xf0, 0xc8, 0x2a, 0xae, 0x5a, 0x14, 0xa3, 0xea, 0x3f, 0x64, 0x15, 0x3f, 0x7e, 0x3d, 0x99, 0x0a,
	0x9e, 0x74, 0xb8, 0x72, 0x9e, 0x41, 0x15, 0xbd, 0xfa, 0xcf, 0x79, 0xb6, 0xd1, 0x9d, 0xf8, 0xa7,
	0x5e, 0x77, 0x32, 0xfe, 0xb1, 0x47, 0x30, 0xd0, 0x9e, 0xf2, 0x05, 0x82, 0xd0, 0x16, 0x81, 0xfd,
	0x02, 0x70, 0x52, 0x8d, 0xe8, 0xa5, 0x90, 0xc5, 0x18, 0x31, 0x79, 0xbc, 0x48, 0x77, 0xd8, 0x2d,
	0xef, 0x55, 0x0d, 0x34, 0xab, 0x73, 0x76, 0x06, 0xc2, 0xee, 0xc0, 0xf9, 0x4c, 0xfc, 0x81, 0x37,
	0xa5, 0x7d, 0x55, 0x76, 0xdf, 0x54, 0xf6, 0x95, 0x81, 0xc5, 0xb3, 0x17, 0xeb, 0x6f, 0x32, 0xf6,
	0xd2, 0x9f, 0x04, 0xb3, 0xfe, 0xd0, 0x9f, 0x7a, 0xb4, 0xd1, 0x15, 0xae, 0x40, 0x50, 0x1f, 0x27,
	0xe3, 0xe1, 0x70, 0x0c, 0x0b, 0xe0, 0x50, 0x5f, 0xc0, 0xeb, 0x8a, 0x84, 0x93, 0x82, 0x56, 0x4f,
	0x58, 0x39, 0xe2, 0x5a, 0xd7, 0xd8, 0xaa, 0xdd, 0x75, 0x8d, 0x23, 0xc3, 0x6a, 0x1a, 0xb5, 0x26,
	0x9e, 0x3d, 0x9e, 0x78, 0xd7, 0x75, 0xb8, 0x81, 0x27, 0x9e, 0xd3, 0x75, 0xb6, 0x6e, 0x3e, 0x75,
	0x6b, 0xa6, 0xed, 0xb8, 0x9d, 0xfd, 0x7d, 0x93, 0xdb, 0xa0, 0x05, 0x9b, 0x6c, 0x0d, 0x60, 0x46,
	0xb3, 0x19, 0x82, 0x0a, 0xb8, 0x0a, 0x40, 0x72, 0x55, 0xb1, 0x6a, 0xb2, 0xca, 0x91, 0x37, 0x9a,
	0x79, 0xdc, 0x9b, 0xce, 0x86, 0x81, 0x7e, 0x93, 0x95, 0x5e, 0xe2, 0x50, 0x7a, 0x45, 0x31, 0xd0,
	0x1f, 0xb0, 0x8a, 0x70, 0x8f, 0xf5, 0xf1, 0x6c, 0x14, 0x90, 0x70, 0x4a, 0x5c, 0x05, 0x55, 0x3b,
	0x6c, 0xb3, 0xde, 0x1f, 0x9d, 0x7a, 0x43, 0xe5, 0x00, 0x91, 0xd8, 0x89, 0xe2, 0x62, 0xc5, 0x00,
	0xad, 0x6c, 0xea, 0xff, 0x14, 0x5e, 0x38, 0x90, 0x9a, 0x90, 0x27, 0x63, 0x4c, 0x02, 0xab, 0xff,
	0x98, 0x63, 0x9b, 0x73, 0x2a, 0x71, 0x09, 0xc5, 0x2f, 0x98, 0x3e, 0xf2, 0xbe, 0xec, 0xa2, 0x6d,
	0x4d, 0x03, 0x0f, 0xb8, 0x70, 0x5e, 0x5f, 0x84, 0xaa, 0xb9, 0x7d, 0xb9, 0x82, 0xed, 0xa4, 0x56,
	0xf0, 0x0c, 0x2a, 0xd5, 0xdf, 0x06, 0xb5, 0x4b, 0x82, 0xf4, 0x32, 0x2b, 0x35, 0x8d, 0xae, 0x8d,
	0x47, 0x50, 0x61, 0xcb, 0x5d, 0x10, 0xab, 0x65, 0x3b, 0x70, 0x00, 0x37, 0xd8, 0x46, 0xcb, 0xe0,
	0x8f, 0x4d, 0x90, 0x7f, 0xdb, 0x25, 0xe3, 0xd3, 0xf2, 0xd5, 0xdf, 0x2f, 0x85, 0xf6, 0xbb, 0xef,
	0x0f, 0x03, 0x6f, 0xa2, 0xdf, 0x67, 0xe5, 0xc0, 0x7b, 0x15, 0x7c, 0x3e, 0xf3, 0x26, 0xaf, 0xe5,
	0x36, 0x62, 0x00, 0x4a, 0xda, 0x7b, 0x75, 0xfa, 0xbc, 0x3f, 0x7a, 0xe6, 0x59, 0x03, 0x54, 0xc3,
	0x02, 0x4a, 0x5a, 0x01, 0xa1, 0xc3, 0xf3, 0xe0, 0x54, 0x02, 0x64, 0x05, 0x51, 0x0a, 0x84, 0x92,
	0x80, 0x61, 0x50, 0xa0, 0x31, 0xce, 0x17, 0x69, 0x3e, 0x1a, 0xa3, 0xf2, 0x61, 0x80, 0xf0, 0x02,
	0x1f, 0x65, 0x80, 0x18, 0x25, 0xc2, 0x48, 0x41, 0x91, 0xcf, 0x30, 0x24, 0x4e, 0x21, 0xb2, 0x20,
	0x4a, 0x0c, 0xc0, 0xd0, 0x42, 0xaa, 0x31, 0x85, 0xd0, 0x82, 0x53, 0x72, 0x84, 0x2e, 0x0f, 0xe2,
	0x53, 0x67, 0x34, 0x7c, 0x4d, 0x21, 0x65, 0x85, 0x87, 0x43, 0xfd, 0x3d, 0xb6, 0x19, 0xcc, 0x26,
	0x23, 0x6b, 0xd4, 0x85, 0x10, 0x64, 0x8e, 0xd0, 0x41, 0x0e, 0x28, 0x98, 0xac, 0xf0, 0xf9, 0x09,
	0x34, 0x21, 0x9f, 0x00, 0x44, 0x8a, 0x09, 0x13, 0x8a, 0x21, 0xfa, 0x8f, 0x98, 0x2e, 0x98, 0xa9,
	0x89, 0xd3, 0xc5, 0x9d, 0x4f, 0x21, 0x7a, 0xa0, 0x0f, 0xb8, 0x97, 0x0e, 0xbf, 0x31, 0x0a, 0xcf,
	0x58, 0x85, 0x0e, 0x5d, 0x51, 0xe5, 0x89, 0x0f, 0x84, 0x56, 0x69, 0x53, 0x69, 0xb0, 0xfe, 0x5b,
	0x21, 0x26, 0x2e, 0x44, 0xa7, 0x36, 0x85, 0x48, 0x82, 0xaf, 0xbc, 0x91, 0x7a, 0x25, 0xbd, 0x2b,
	0x8d, 0x0b, 0x1e, 0x50, 0x82, 0xc0, 0xbe, 0x27, 0x01, 0xc5, 0xbb, 0x75, 0xf2, 0x33, 0x7a, 0xb4,
	0x1c, 0x81, 0x1c, 0x8f, 0x9a, 0xa7, 0x51, 0x21, 0xcb, 0x60, 0x5f, 0xfa, 0xc1, 0xf3, 0xce, 0x64,
	0x80, 0x61, 0x63, 0x83, 0xde, 0x1b, 0x3b, 0x5e, 0x02, 0xc7, 0xee, 0x8e, 0x2b, 0xb8, 0xd5, 0x3f,
	0xcc, 0xb1, 0xbb, 0xf5, 0xa1, 0xd7, 0x9f, 0x78, 0x03, 0x82, 0xd8, 0xb3, 0x73, 0x20, 0xfe, 0x5a,
	0x46, 0x80, 0x1a, 0x44, 0x3d, 0x65, 0x72, 0x4a, 0x9e, 0xb4, 0xb2, 0x7b, 0x3f, 0x22, 0x9d, 0xb5,
	0x34, 0xb9, 0x04, 0x6d, 0xfa, 0x7c, 0x3c, 0xf1, 0xe2, 0x00, 0x2b, 0xb2, 0xa5, 0x24, 0xb0, 0xfa,
	0x2f, 0xe0, 0xc3, 0xad, 0xc0, 0x3b, 0x6f, 0x78, 0xd3, 0xd3, 0x89, 0x7f, 0x41, 0x16, 0x0d, 0x2b,
	0x23, 0xd5, 0x45, 0xb8, 0x34, 0x89, 0x24, 0x10, 0x95, 0x91, 0x00, 0x84, 0x91, 0x17, 0x46, 0x13,
	0x01, 0x50, 0x59, 0x84, 0xb0, 0x68, 0xba, 0x40, 0xd3, 0x0a, 0x44, 0x7f, 0x14, 0xce, 0x93, 0x5f,
	0x28, 0x92, 0x5f, 0xc8, 0x3c, 0x31, 0x05, 0x4d, 0x6f, 0xcc, 0x1f, 0x56, 0xe9, 0xda, 0xe4, 0x64,
	0xee, 0xd0, 0x80, 0x35, 0x11, 0xc8, 0x89, 0xb5, 0x25, 0xc1, 0x5a, 0x0c, 0xc9, 0x4a, 0xc5, 0x96,
	0xb3, 0x53, 0x31, 0xb0, 0x5b, 0xaf, 0x7f, 0xfa, 0xfc, 0x49, 0xff, 0x75, 0xc3, 0x7f, 0xe9, 0x4f,
	0xc7, 0x13, 0x32, 0x30, 0x48, 0x62, 0x92, 0xd0, 0xea, 0xdf, 0xe5, 0x58, 0x89, 0x72, 0x95, 0x4b,
	0x9c, 0x25, 0x58, 0xe8, 0x39, 0x4e, 0x5b, 0x03, 0x29, 0xc8, 0x70, 0xa8, 0x7f, 0x8b, 0x15, 0xa7,
	0x10, 0xbf, 0x64, 0x12, 0xbb, 0x16, 0x09, 0xc8, 0x06, 0x20, 0xa7, 0x29, 0x24, 0x49, 0xc1, 0x93,
	0x84, 0x98, 0xe3, 0x62, 0x00, 0x91, 0xa7, 0x88, 0xce, 0x9b, 0xe4, 0x93, 0xe3, 0xf4, 0x0c, 0xda,
	0x5a, 0x26, 0xba, 0x10, 0xbb, 0x44, 0x62, 0x7a, 0xb5, 0xe0, 0x62, 0xe4, 0xea, 0x3f, 0xe4, 0x20,
	0x90, 0x49, 0x87, 0x47, 0xe1, 0x8f, 0x0c, 0xa7, 0x1f, 0x6a, 0x91, 0x33, 0xae, 0xf5, 0x4f, 0x5f,
	0x48, 0x25, 0xd5, 0x93, 0xe1, 0xde, 0xc6, 0x10, 0x92, 0x46, 0xd5, 0x3f, 0x61, 0xeb, 0x0a, 0xa8,
	0x09, 0xe9, 0x70, 0xfe, 0xd2, 0xc5, 0x29, 0x4c, 0x48, 0x76, 0x56, 0x83, 0x49, 0x7f, 0xe0, 0x0d,
	0x8e, 0xc6, 0xc3, 0xd9, 0xb9, 0x47, 0xde, 0x36, 0x7b, 0x65, 0x02, 0xaf, 0xfa, 0xc7, 0x79, 0x76,
	0x13, 0x9c, 0xd5, 0xa9, 0x97, 0x4a, 0x88, 0xd0, 0xc1, 0x9f, 0xce, 0xa6, 0xc1, 0xf8, 0x1c, 0x72,
	0x3c, 0xef, 0x4c, 0x1e, 0x8d, 0x0a, 0x52, 0x32, 0xb2, 0xfc, 0xff, 0x26, 0x23, 0x2b, 0x2c, 0x9e,
	0x91, 0xa9, 0x55, 0x50, 0x31, 0x55, 0x05, 0x75, 0x98, 0xee, 0xa7, 0x93, 0x45, 0x11, 0x2a, 0x2a,
	0xbb, 0x6f, 0xc5, 0xdb, 0xc7, 0x2d, 0xce, 0x25, 0x95, 0x3c, 0x63, 0x69, 0xf5, 0x09, 0x64, 0x08,
	0xe4, 0x48, 0x5f, 0xe3, 0xbb, 0x65, 0xba, 0x81, 0xd2, 0x88, 0x81, 0x91, 0x34, 0x62, 0xd0, 0x02,
	0xa9, 0xc7, 0x9f, 0xe7, 0x90, 0x72, 0x14, 0xbb, 0x24, 0xe5, 0x8f, 0x90, 0x72, 0x04, 0x24, 0xca,
	0x95, 0xdd, 0x9b, 0xb1, 0x4f, 0x53, 0x16, 0xa8, 0x88, 0xd7, 0xbf, 0x0f, 0x03, 0xd9, 0xa9, 0xfa,
	0xba, 0x67, 0x61, 0x36, 0x5b, 0xe6, 0xf3, 0x13, 0xd5, 0x7f, 0xcb, 0xb3, 0xdb, 0xd9, 0x52, 0xfa,
	0x15, 0xa6, 0xde, 0x9f, 0x66, 0xa5, 0xde, 0x77, 0x2f, 0x3f, 0x45, 0x15, 0x3b, 0x76, 0x23, 0x45,
	0xd5, 0x8d, 0x7c, 0xc2, 0xd8, 0x05, 0x2e, 0x1b, 0x90, 0x81, 0x5f, 0xef, 0x19, 0x15, 0x6c, 0xac,
	0xb0, 0xfb, 0x90, 0xe5, 0xf6, 0xa5, 0x7d, 0x87, 0xa5, 0xdb, 0x12, 0xb9, 0x8f, 0xac, 0x29, 0x3c,
	0x15, 0xf4, 0x2a, 0x21, 0xe6, 0x32, 0x61, 0xaa, 0xa0, 0xea, 0x7f, 0xe4, 0x99, 0x96, 0xde, 0x07,
	0xbc, 0xa8, 0x4c, 0x01, 0x8a, 0xfc, 0xbe, 0x10, 0xb2, 0x9e, 0x8c, 0x98, 0xe4, 0xf6, 0xcb, 0xe3,
	0xf0, 0x91, 0x5e, 0xe4, 0x0d, 0x45, 0x0c, 0x95, 0x1e, 0xb2, 0xc0, 0x55, 0x10, 0x1a, 0x0d, 0xb8,
	0xa6, 0x81, 0x7f, 0xda, 0xbf, 0x20, 0x41, 0xe6, 0x78, 0x34, 0x8e, 0x3c, 0x68, 0xf1, 0x72, 0x0f,
	0x0a, 0xb1, 0x68, 0xe8, 0x9f, 0xfb, 0x01, 0xbd, 0x5d, 0xca, 0x2d, 0x8e, 0x45, 0xcd, 0x68, 0x8a,
	0x2b, 0x68, 0xfa, 0x21, 0xdb, 0x14, 0xa3, 0x51, 0x7d, 0x38, 0x9e, 0x7a, 0x62, 0xed, 0x52, 0xaa,
	0x80, 0x6a, 0xa6, 0x31, 0xf8, 0xfc, 0x22, 0xfd, 0x71, 0x98, 0x37, 0x25, 0x48, 0x2d, 0x13, 0xa9,
	0x6f, 0xa4, 0x42, 0x62, 0x82, 0x56, 0xc6, 0xb2, 0xea, 0x2f, 0x0b, 0x90, 0xf1, 0x0a, 0xcb, 0x80,
	0x0a, 0x65, 0x38, 0x7e, 0x36, 0xf3, 0xae, 0xec, 0xac, 0x44, 0x71, 0xba, 0xdd, 0x3f, 0xf7, 0x64,
	0xf4, 0x51, 0x20, 0x59, 0x21, 0xb7, 0xf0, 0xd5, 0x43, 0x2e, 0xd4, 0x99, 0x83, 0x38, 0xc1, 0xa0,
	0xb3, 0xa8, 0xcc, 0xe5, 0x84, 0x4a, 0x0a, 0xc2, 0x55, 0xf4, 0xb9, 0x7e, 0x42, 0x29, 0xa3, 0x9f,
	0xf0, 0x30, 0xae, 0xde, 0x97, 0xc8, 0x21, 0xde, 0x4e, 0x55, 0xef, 0x52, 0x1c, 0x51, 0x11, 0x8f,
	0x8a, 0x18, 0x25, 0x34, 0x52, 0xda, 0xb1, 0x22, 0x9a, 0xe1, 0x0c, 0x8f, 0x91, 0xd2, 0xfe, 0x6b,
	0x65, 0x51, 0xff, 0xf5, 0x0e, 0x2b, 0x11, 0x11, 0x4a, 0xad, 0x2b, 0xbb, 0xeb, 0xc9, 0xb7, 0x70,
	0x31, 0x59, 0xfd, 0xcb, 0x1c, 0xbb, 0x21, 0x04, 0x01, 0x29, 0xe3, 0x99, 0x1f, 0x18, 0xa3, 0x41,
	0x73, 0x3c, 0x9d, 0x5e, 0x79, 0x7a, 0xc2, 0xef, 0x9d, 0xfb, 0x53, 0xec, 0x60, 0x18, 0x17, 0x17,
	0x43, 0x5f, 0x76, 0xc5, 0x72, 0x7c, 0x7e, 0x42, 0xdf, 0x67, 0x1b, 0x17, 0x2a, 0x69, 0x6f, 0x2a,
	0x63, 0xe7, 0xfd, 0x94, 0xac, 0x12, 0x0c, 0xf0, 0xf4, 0xa2, 0xea, 0xfb, 0x50, 0xae, 0x46, 0x42,
	0x59, 0x67, 0x79, 0x3f, 0x64, 0x0c, 0x9e, 0x30, 0xf1, 0x18, 0xc5, 0xaa, 0x44, 0xcf, 0xd5, 0xbf,
	0x5a, 0x66, 0x37, 0xea, 0xb3, 0xc9, 0x04, 0xd6, 0xa8, 0x19, 0xeb, 0x25, 0xd9, 0x90, 0xba, 0xe1,
	0x7c, 0x6a, 0xc3, 0x29, 0x5f, 0x50, 0xb8, 0xda, 0x17, 0x14, 0x53, 0xbe, 0xe0, 0xa1, 0x6c, 0x4e,
	0xd8, 0x61, 0x66, 0x94, 0x9d, 0x36, 0xc4, 0x48, 0xa8, 0x7a, 0x50, 0x2c, 0x35, 0xfd, 0xfe, 0x89,
	0x3f, 0xf4, 0x83, 0xd7, 0xd2, 0x1f, 0x26, 0x60, 0x91, 0x87, 0x59, 0xbe, 0xdc, 0xc3, 0xc4, 0x61,
	0x65, 0x25, 0x15, 0x21, 0xd2, 0x35, 0x42, 0x18, 0x56, 0x8e, 0xe0, 0xac, 0x52, 0xc5, 0x73, 0x99,
	0x96, 0xbe, 0x17, 0xeb, 0xdb, 0xbc, 0x44, 0xe7, 0xca, 0xe7, 0x34, 0x91, 0xa4, 0xfb, 0x65, 0x8b,
	0xb8, 0xdf, 0x64, 0x54, 0xa9, 0x7c, 0xa5, 0xa8, 0xf2, 0x43, 0x8c, 0xdc, 0x64, 0xa0, 0xb4, 0x78,
	0xf5, 0xda, 0xc5, 0x2a, 0xfa, 0x65, 0x31, 0x69, 0x6d, 0xe1, 0x98, 0xb4, 0x3e, 0x17, 0x93, 0xe2,
	0x4e, 0xc7, 0x79, 0xdf, 0x1f, 0x61, 0x3f, 0x71, 0x43, 0xed, 0x74, 0x48, 0x20, 0x7a, 0x45, 0x04,
	0x34, 0xfb, 0x17, 0x53, 0x20, 0xa3, 0x11, 0x8a, 0x02, 0x09, 0xa9, 0x88, 0xf6, 0x0a, 0x16, 0xcd,
	0x9b, 0x31, 0x95, 0x08, 0x18, 0x52, 0xc1, 0xde, 0x23, 0xa0, 0xe8, 0x31, 0x15, 0x01, 0x41, 0xeb,
	0x9d, 0x78, 0xcf, 0x66, 0xc3, 0x7e, 0x30, 0x9e, 0x18, 0xb3, 0xe0, 0x39, 0xa5, 0x10, 0x37, 0x44,
	0xd6, 0x32, 0x37, 0x81, 0xef, 0x8c, 0x80, 0x84, 0x79, 0x53, 0x54, 0x65, 0x09, 0xe0, 0xd7, 0xee,
	0x8d, 0xfc, 0x7b, 0x9e, 0xdd, 0xca, 0x6c, 0xac, 0x61, 0x59, 0x74, 0x02, 0x60, 0x91, 0xfe, 0x37,
	0xbc, 0x8b, 0xe0, 0x39, 0x99, 0x2d, 0x94, 0x45, 0x29, 0xb0, 0xde, 0x64, 0x15, 0xec, 0x9a, 0xcd,
	0x2e, 0x5a, 0xc0, 0xd1, 0x70, 0xae, 0xe9, 0x93, 0x49, 0x7e, 0x87, 0xc7, 0x2b, 0xb8, 0xba, 0x1c,
	0xcf, 0x54, 0x0c, 0x29, 0x98, 0x92, 0xc9, 0x97, 0xb8, 0x0a, 0x02, 0x0d, 0xdd, 0x0a, 0x87, 0xd2,
	0x26, 0x9d, 0xe7, 0x13, 0x6f, 0xfa, 0x7c, 0x3c, 0x1c, 0x48, 0x17, 0x70, 0xe9, 0x3c, 0xf6, 0xc8,
	0x53, 0x73, 0xfb, 0xfd, 0x53, 0x10, 0x26, 0xb9, 0x87, 0x12, 0xcf, 0x9e, 0xc4, 0x0e, 0x9d, 0xc2,
	0x2f, 0x4a, 0xd8, 0x76, 0x8c, 0xc7, 0x28, 0x61, 0xc6, 0x96, 0xba, 0xc6, 0x71, 0xa7, 0x87, 0x02,
	0xbe, 0xc5, 0x36, 0x5b, 0x46, 0xdb, 0x38, 0x30, 0x1b, 0x6e, 0xd3, 0x32, 0x6a, 0x56, 0xd3, 0x72,
	0x8e, 0xb5, 0x3c, 0xf6, 0x87, 0xdb, 0x9d, 0xb6, 0xa9, 0x15, 0x44, 0x13, 0x60, 0xde, 0x8a, 0x95,
	0x26, 0x80, 0x32, 0x99, 0xd1, 0x04, 0xc8, 0x58, 0x9a, 0x5c, 0x32, 0xdf, 0x04, 0x28, 0x64, 0x35,
	0x01, 0x76, 0x99, 0x3e, 0x9f, 0x5e, 0x60, 0x81, 0x3f, 0x8c, 0x1c, 0x5f, 0x8e, 0xe4, 0x18, 0x03,
	0xaa, 0x7f, 0x02, 0x49, 0x34, 0x30, 0xfa, 0xeb, 0x5c, 0x4f, 0x7d, 0x7e, 0x45, 0x3d, 0xf5, 0xad,
	0x38, 0x24, 0x8a, 0x4d, 0x2e, 0x56, 0x51, 0xf5, 0x58, 0x45, 0x04, 0x75, 0x51, 0xf1, 0x44, 0x91,
	0x3f, 0x77, 0x45, 0xe4, 0x5f, 0xa0, 0x9e, 0xfa, 0x05, 0x58, 0xa5, 0xe8, 0x95, 0xfe, 0xba, 0xca,
	0xba, 0x7b, 0x85, 0xac, 0x1f, 0x5c, 0x71, 0xe1, 0x70, 0xb9, 0xa8, 0xff, 0xa8, 0x04, 0xe6, 0x95,
	0x4e, 0x1c, 0xf5, 0x1d, 0xa6, 0x2b, 0x21, 0x2f, 0xec, 0x69, 0xe6, 0x48, 0xeb, 0x33, 0x66, 0x50,
	0xc9, 0x21, 0x98, 0x0b, 0x3a, 0xb2, 0x43, 0x16, 0x03, 0x30, 0xf6, 0xc9, 0xf6, 0xd3, 0x62, 0x89,
	0xaf, 0x82, 0x8d, 0xb1, 0x6f, 0x3a, 0x9b, 0x5e, 0x78, 0xa3, 0x01, 0x2d, 0x2e, 0x5e, 0x1f, 0xfb,
	0x14, 0x74, 0x7c, 0xf3, 0x14, 0x84, 0x32, 0xf4, 0x16, 0xec, 0x72, 0x29, 0xd8, 0xf8, 0xe6, 0x93,
	0xb8, 0x99, 0x4a, 0x39, 0xcb, 0xd5, 0x1d, 0x58, 0x15, 0x3d, 0xbb, 0x29, 0xbc, 0x7c, 0x45, 0x53,
	0x58, 0xe9, 0xe3, 0xad, 0xa8, 0xf5, 0x03, 0x51, 0x03, 0xf9, 0x46, 0x01, 0x8a, 0x32, 0x98, 0x32,
	0x8f, 0x01, 0xd8, 0x40, 0x93, 0xcd, 0xdf, 0xfe, 0xd4, 0xe3, 0x98, 0x22, 0x30, 0xd1, 0x40, 0x4b,
	0x42, 0x31, 0xf6, 0x0c, 0xfc, 0x29, 0xf5, 0x20, 0x8c, 0xe1, 0x70, 0xfc, 0x25, 0x70, 0x54, 0x11,
	0xf7, 0x7b, 0x29, 0x30, 0x36, 0xc1, 0xbf, 0xec, 0x43, 0xf4, 0x0d, 0x28, 0xd9, 0x28, 0x73, 0x39,
	0xc2, 0x54, 0x73, 0x32, 0x1b, 0x52, 0x73, 0x98, 0x52, 0x4d, 0x1a, 0x60, 0x7a, 0x47, 0x0f, 0x87,
	0xfd, 0x29, 0x25, 0x28, 0xe2, 0x72, 0x31, 0x01, 0xa3, 0xe6, 0xfc, 0xb0, 0x3f, 0xf1, 0xcf, 0x20,
	0x85, 0x44, 0x15, 0x9b, 0x52, 0xca, 0x50, 0xe6, 0x29, 0x68, 0xd5, 0x63, 0x1b, 0x71, 0xa7, 0x58,
	0x98, 0x3f, 0x24, 0x5b, 0x41, 0x08, 0x92, 0x2e, 0x20, 0xab, 0xad, 0x1c, 0x23, 0x2d, 0xe0, 0x0a,
	0x7e, 0x8f, 0xdd, 0xc8, 0x48, 0xd2, 0xd3, 0x89, 0xb1, 0xf4, 0x03, 0x6a, 0x62, 0x0c, 0x12, 0xf0,
	0xb1, 0x73, 0x29, 0xeb, 0x03, 0x31, 0xa0, 0xfb, 0xe8, 0x33, 0xa0, 0xe0, 0xc9, 0xc2, 0x59, 0x8e,
	0xb0, 0x25, 0xe9, 0x9f, 0x51, 0xf1, 0x2e, 0x43, 0x68, 0x38, 0xac, 0x1e, 0xb0, 0xcd, 0xb9, 0xb2,
	0xf6, 0xea, 0x58, 0x11, 0xb7, 0x28, 0xf3, 0x4a, 0x8b, 0x92, 0x9c, 0x9a, 0x48, 0x96, 0xfe, 0x7f,
	0x3b, 0xb5, 0xb9, 0x4b, 0xb8, 0x2b, 0x9c, 0x9a, 0xcb, 0x2a, 0xc2, 0x3c, 0x51, 0xed, 0xa7, 0x19,
	0xf6, 0x91, 0x5b, 0xd4, 0x3e, 0xf2, 0x99, 0xf6, 0x51, 0xfd, 0x79, 0x9e, 0xad, 0x25, 0x0a, 0xe2,
	0x2c, 0xcd, 0x49, 0x95, 0x54, 0x51, 0xc3, 0x5c, 0xed, 0x11, 0xc4, 0x90, 0x2b, 0xdb, 0x2f, 0x60,
	0x61, 0x53, 0xd8, 0x19, 0xa4, 0x87, 0xe3, 0x09, 0xea, 0x86, 0xf8, 0xa2, 0x22, 0x01, 0xd3, 0x3f,
	0x03, 0x11, 0x7b, 0x41, 0x7f, 0x80, 0x57, 0xc6, 0x42, 0x78, 0xef, 0x64, 0x17, 0xef, 0x3b, 0x2d,
	0x89, 0x66, 0x62, 0x2f, 0x92, 0x47, 0xab, 0xee, 0x7d, 0xca, 0xd6, 0x12, 0x53, 0xba, 0xc6, 0x0a,
	0x2f, 0xbc, 0xf0, 0x2e, 0x0f, 0x1f, 0xe9, 0x16, 0xb5, 0x3f, 0x9c, 0x85, 0xfc, 0x8b, 0xc1, 0x27,
	0xf9, 0x8f, 0x73, 0x78, 0xad, 0xc9, 0xe2, 0x26, 0x4f, 0xd4, 0x39, 0xcf, 0x29, 0x9d, 0xf3, 0x4c,
	0x05, 0xd6, 0x5b, 0xf3, 0x35, 0x9a, 0x50, 0xac, 0xb7, 0x33, 0x9a, 0x47, 0xd7, 0x96, 0x66, 0x5f,
	0x3b, 0x75, 0xff, 0xeb, 0x3c, 0xbb, 0x73, 0x89, 0xae, 0xfd, 0xdf, 0xf9, 0xa4, 0x60, 0x9e, 0xc1,
	0x44, 0x63, 0x73, 0xae, 0xb0, 0x2a, 0x66, 0x15, 0x56, 0x9f, 0x41, 0x66, 0x1c, 0x0e, 0x16, 0xec,
	0x75, 0x26, 0x17, 0x54, 0xf7, 0xe4, 0x35, 0xbe, 0x9d, 0x38, 0xdd, 0x5c, 0xd6, 0x0d, 0x4a, 0x3e,
	0xd6, 0x83, 0xea, 0xbf, 0xe6, 0xd8, 0x3a, 0x75, 0xb5, 0x60, 0x2b, 0xf2, 0x1e, 0x04, 0x3c, 0xdf,
	0xc8, 0xeb, 0x4f, 0xba, 0x0a, 0x81, 0x18, 0x80, 0xa6, 0x71, 0x16, 0x4e, 0x0a, 0x42, 0xd1, 0x18,
	0xef, 0x40, 0x4e, 0xfa, 0xa7, 0x2f, 0xe8, 0xc3, 0x02, 0x07, 0xfe, 0x46, 0x57, 0xdc, 0x64, 0xa4,
	0x30, 0x41, 0x02, 0x9b, 0x10, 0x84, 0xe3, 0x7a, 0x86, 0x96, 0x17, 0x2f, 0x5d, 0x3e, 0x8f, 0x8c,
	0x9c, 0x41, 0x2d, 0x33, 0xeb, 0x0f, 0xed, 0xae, 0x6c, 0xa8, 0x45, 0xe3, 0xaa, 0xcf, 0x34, 0xe5,
	0x06, 0x4e, 0xc4, 0xb2, 0xe4, 0x85, 0x5d, 0x6e, 0xb1, 0x0b, 0xbb, 0xeb, 0xc3, 0xd9, 0xcf, 0x72,
	0x60, 0xba, 0x34, 0x6e, 0x02, 0xb3, 0x70, 0x44, 0x4a, 0x04, 0xcf, 0x65, 0x47, 0xf0, 0xfc, 0x55,
	0x11, 0xbc, 0xb0, 0x50, 0x04, 0x2f, 0x66, 0x46, 0xf0, 0xff, 0x5c, 0x62, 0x37, 0x32, 0x2e, 0x56,
	0xe9, 0x03, 0x80, 0xf8, 0x2a, 0x3f, 0x0c, 0x47, 0x0a, 0x08, 0xa3, 0xa5, 0xbc, 0xcc, 0x0f, 0x2f,
	0xf0, 0xe4, 0x30, 0x11, 0x3e, 0x0a, 0x57, 0x37, 0xb3, 0x8a, 0xf3, 0x31, 0x5b, 0xf5, 0xac, 0xa5,
	0x94, 0x67, 0x8d, 0x9a, 0x67, 0x4b, 0x97, 0xdf, 0x01, 0x2c, 0x7f, 0xa5, 0x6e, 0x4d, 0x46, 0xcf,
	0x69, 0x25, 0xdd, 0x73, 0x9a, 0x17, 0xcf, 0x42, 0x3d, 0xa7, 0xa8, 0x9d, 0x24, 0xbb, 0x58, 0xd7,
	0xf4, 0x9c, 0xc2, 0x96, 0x1a, 0xbb, 0xbc, 0xa5, 0x56, 0x63, 0x1b, 0x7e, 0xf2, 0xde, 0x5a, 0xf6,
	0xa6, 0x62, 0x2f, 0x95, 0xba, 0xd7, 0xe6, 0xe9, 0x05, 0xa8, 0x18, 0x64, 0xeb, 0xdc, 0xfb, 0xc9,
	0x0c, 0xe4, 0x11, 0x7d, 0xaa, 0x96, 0x82, 0x52, 0x2a, 0x4f, 0xe9, 0xb5, 0x90, 0xea, 0xda, 0x02,
	0xa9, 0x7c, 0x8c, 0x2e, 0x3f, 0x28, 0x14, 0x16, 0xb0, 0x1e, 0x7d, 0x50, 0x28, 0x2e, 0xae, 0x20,
	0xb4, 0xc6, 0x7d, 0x5a, 0xd9, 0x8b, 0x52, 0x20, 0xa8, 0xde, 0x17, 0x6a, 0xef, 0x4b, 0xb4, 0xa2,
	0x12, 0xb0, 0x08, 0x87, 0x3e, 0xd4, 0x91, 0xbd, 0xa8, 0x15, 0x9e, 0x80, 0x85, 0x8d, 0x31, 0x5b,
	0xb0, 0x25, 0x7b, 0x51, 0x2a, 0x08, 0xcd, 0x4e, 0xf4, 0x79, 0xa9, 0x03, 0x05, 0x89, 0xa0, 0x18,
	0xcd, 0x7b, 0xe4, 0x9b, 0x19, 0x1e, 0xf9, 0x6b, 0xc7, 0xae, 0x5f, 0xe6, 0x58, 0x89, 0x6a, 0xe2,
	0x45, 0xfa, 0xc9, 0xe9, 0x2b, 0xca, 0xc2, 0xfc, 0x15, 0x25, 0xc8, 0x1c, 0x93, 0xea, 0x9f, 0x8e,
	0x47, 0x5e, 0x98, 0xb5, 0x85, 0xe3, 0xf8, 0x7b, 0xaa, 0x92, 0xfa, 0x3d, 0xd5, 0x47, 0x6c, 0x65,
	0x0c, 0xd5, 0xd7, 0x82, 0x77, 0xe3, 0x11, 0x6e, 0xf5, 0xe7, 0x25, 0x56, 0x12, 0x89, 0x43, 0x76,
	0x37, 0x3b, 0xd1, 0x70, 0xcd, 0x2f, 0xa2, 0xfc, 0x0f, 0x53, 0x9f, 0xae, 0x5e, 0xdf, 0x2c, 0x3e,
	0x9c, 0x37, 0x5c, 0x71, 0xdd, 0xf5, 0x66, 0x72, 0xe9, 0xf5, 0xa6, 0x1a, 0x1a, 0x5e, 0x69, 0x81,
	0xef, 0x0d, 0x96, 0xb2, 0xa2, 0xe5, 0xb2, 0x92, 0x35, 0xa5, 0x9b, 0xe7, 0x2b, 0x19, 0xcd, 0xf3,
	0xa4, 0xbf, 0x2a, 0x7f, 0x25, 0x7f, 0xf5, 0x2e, 0x7e, 0x82, 0xf0, 0x2c, 0xd1, 0x1b, 0x16, 0xe5,
	0x63, 0x1a, 0x9c, 0xee, 0x0b, 0x57, 0x16, 0xe8, 0x0b, 0xaf, 0x5e, 0xdf, 0x17, 0x5e, 0xbb, 0xbe,
	0x2f, 0xbc, 0x7e, 0x7d, 0x5f, 0x78, 0x23, 0xdd, 0x17, 0xfe, 0xda, 0xc6, 0xf4, 0x8c, 0x95, 0xa3,
	0xe2, 0x52, 0xdf, 0x61, 0xc5, 0xb3, 0xc9, 0xf8, 0x5c, 0x96, 0x9f, 0x57, 0x89, 0x96, 0xf0, 0xf4,
	0x6d, 0x96, 0x0f, 0xc6, 0xf2, 0x5b, 0xcb, 0xab, 0xb0, 0x01, 0xab, 0xfa, 0xa7, 0xd1, 0x95, 0x55,
	0xd3, 0x1f, 0x89, 0xf7, 0x59, 0xa3, 0xb3, 0x31, 0x1e, 0xfc, 0x79, 0xff, 0x55, 0x6f, 0xe4, 0x07,
	0x47, 0x94, 0x72, 0x8b, 0xb4, 0x28, 0x01, 0x23, 0x1c, 0x7f, 0x14, 0xe3, 0xe4, 0x25, 0x8e, 0x02,
	0x43, 0x2b, 0xf6, 0x47, 0x81, 0x37, 0x81, 0x5c, 0x3d, 0x2c, 0x2c, 0xc2, 0x71, 0xdc, 0x78, 0x40,
	0x74, 0x69, 0xe3, 0x0a, 0xa4, 0xfa, 0xb7, 0x79, 0xb6, 0x75, 0x59, 0xeb, 0xee, 0x57, 0x98, 0x0e,
	0x7f, 0xc1, 0xee, 0x9c, 0x66, 0xe7, 0xe4, 0x32, 0x35, 0xbe, 0xbe, 0x4e, 0xbc, 0x8c, 0x80, 0xfe,
	0x84, 0xdd, 0xce, 0xde, 0x9f, 0x6c, 0x36, 0x5d, 0xfb, 0x4d, 0xc8, 0x25, 0xcb, 0xb1, 0x95, 0x11,
	0x5f, 0x80, 0x46, 0xad, 0x8c, 0xf8, 0xb6, 0x34, 0xb7, 0xc8, 0x6d, 0xe9, 0xf5, 0xb9, 0xdf, 0x80,
	0xad, 0x88, 0xf2, 0x2e, 0x95, 0x27, 0xe5, 0xae, 0xce, 0x93, 0xf2, 0x57, 0xe7, 0x49, 0xa9, 0x0a,
	0xb4, 0xfa, 0x37, 0x45, 0xb6, 0x24, 0x5e, 0xb3, 0x40, 0xa9, 0xab, 0x12, 0xca, 0xa7, 0x12, 0xae,
	0x0f, 0x53, 0x7e, 0x39, 0x7d, 0x6b, 0x2a, 0xff, 0x4b, 0xfd, 0x9c, 0x60, 0x9b, 0x69, 0xfd, 0xc1,
	0x8f, 0x67, 0xd3, 0xe0, 0x1c, 0x04, 0x23, 0xef, 0x16, 0x44, 0x51, 0x33, 0x07, 0x47, 0x87, 0x86,
	0x5f, 0xd2, 0x93, 0xeb, 0x72, 0xe8, 0xd3, 0x25, 0x99, 0xf5, 0xa5, 0xc1, 0x73, 0x57, 0xe2, 0x4b,
	0x19, 0x57, 0xe2, 0x90, 0xb5, 0x4c, 0xbc, 0xf3, 0x31, 0x18, 0xcb, 0x82, 0xb9, 0xa0, 0x8a, 0xae,
	0x7f, 0x87, 0xe5, 0xa7, 0x17, 0xf2, 0x8e, 0xfb, 0x4e, 0x1c, 0x07, 0x12, 0xc5, 0x0f, 0x07, 0x14,
	0x44, 0xf4, 0x5e, 0x49, 0xcf, 0x7d, 0x47, 0x31, 0x09, 0xf5, 0x6b, 0x31, 0x0e, 0x28, 0x90, 0x6d,
	0x2d, 0x8d, 0xc5, 0x45, 0x06, 0xa3, 0x42, 0x65, 0x3d, 0x19, 0x9c, 0xb8, 0x9c, 0x05, 0x29, 0x88,
	0xcf, 0xdf, 0xe4, 0xc7, 0xa3, 0x2a, 0x22, 0x6d, 0x8d, 0x87, 0xd3, 0xd5, 0xdf, 0x65, 0xab, 0xaa,
	0xcc, 0xf1, 0xf2, 0x25, 0xfa, 0x0a, 0x1f, 0x9e, 0x9f, 0x58, 0xed, 0xb6, 0xc9, 0xc1, 0x4b, 0xa2,
	0xf7, 0x04, 0xd7, 0xc8, 0xb5, 0x3c, 0x7e, 0x91, 0xcd, 0xcd, 0x56, 0xe7, 0xc8, 0x6c, 0xb8, 0x47,
	0x46, 0xdd, 0x68, 0x3b, 0x5a, 0x01, 0x3d, 0xaa, 0x84, 0x69, 0x45, 0x5c, 0x77, 0x68, 0x35, 0x1a,
	0x66, 0x5b, 0x2b, 0x55, 0x3f, 0x60, 0x15, 0xe5, 0x52, 0x7f, 0xa1, 0xab, 0xee, 0x7d, 0xa6, 0xcf,
	0x7b, 0x9d, 0xcb, 0x2f, 0xba, 0xf1, 0xeb, 0x66, 0xb5, 0x38, 0x0c, 0xc7, 0xd5, 0xbf, 0xc8, 0xb3,
	0x8a, 0x4c, 0x40, 0x6b, 0xe3, 0xc1, 0x6b, 0xfd, 0x7b, 0x6c, 0xe9, 0x8c, 0x3e, 0x56, 0x96, 0xc6,
	0x77, 0x2b, 0x55, 0x7a, 0x89, 0x2f, 0x99, 0xb9, 0x44, 0xc2, 0x6c, 0x6e, 0x38, 0x3e, 0xed, 0x0f,
	0x43, 0xe6, 0xe4, 0x48, 0x37, 0x99, 0x76, 0x1e, 0x7e, 0x63, 0x20, 0xb3, 0x08, 0xaa, 0x3a, 0xd7,
	0x95, 0x4f, 0x8f, 0x5a, 0x29, 0x04, 0x3e, 0xb7, 0x04, 0xce, 0xbc, 0x38, 0x0d, 0xfd, 0xcc, 0x7c,
	0x19, 0x68, 0xa3, 0x6f, 0x21, 0x04, 0xe1, 0xa5, 0x5f, 0x09, 0x1f, 0x32, 0x95, 0x77, 0x6a, 0x0a,
	0x04, 0xc2, 0x7f, 0xe5, 0xd9, 0xa4, 0x3f, 0x9a, 0x61, 0x21, 0x26, 0xaf, 0xd7, 0x55, 0xc7, 0x8a,
	0xba, 0x79, 0x10, 0xcf, 0x73, 0x15, 0x79, 0xfb, 0x0f, 0x72, 0xe1, 0x05, 0x80, 0xd2, 0xcb, 0xa6,
	0x5f, 0x5f, 0x34, 0x1a, 0xb6, 0xf8, 0x1d, 0x46, 0xd3, 0x6a, 0x9b, 0xe2, 0xfc, 0xb9, 0xd1, 0x3e,
	0x80, 0xd8, 0x08, 0x0c, 0xdd, 0x33, 0x6c, 0xcb, 0x68, 0xbb, 0x87, 0x46, 0xbb, 0x61, 0xd5, 0x8d,
	0xae, 0xdb, 0xe8, 0xf4, 0x6a, 0x4d, 0xd3, 0x25, 0xd4, 0x42, 0xc6, 0xbc, 0x6d, 0xb5, 0x0f, 0xc2,
	0xf9, 0x22, 0xe8, 0x00, 0xdb, 0xb7, 0x9e, 0x82, 0xf6, 0xd0, 0x4b, 0x4a, 0xdb, 0xbf, 0xc8, 0xb3,
	0x32, 0xe8, 0xba, 0x27, 0x0a, 0x8a, 0x4d, 0xb6, 0xe6, 0x74, 0x3a, 0x6e, 0xab, 0x57, 0x3f, 0x74,
	0x1b, 0x86, 0x63, 0x00, 0x17, 0xb7, 0x99, 0x6e, 0xb5, 0x8f, 0x8c, 0xa6, 0xd5, 0x70, 0xad, 0x76,
	0xb7, 0xe7, 0x08, 0x78, 0x4e, 0x7f, 0x8b, 0x7d, 0x23, 0x84, 0xdb, 0xa6, 0x6d, 0x5b, 0x10, 0xbf,
	0xad, 0xf6, 0x7e, 0x87, 0xb7, 0x0c, 0x07, 0x9e, 0x81, 0x53, 0x78, 0x53, 0xbb, 0xe3, 0x1a, 0xdd,
	0xae, 0xfb, 0xd8, 0x3c, 0x06, 0xce, 0xc4, 0x58, 0xe2, 0x02, 0x27, 0x37, 0x99, 0xd6, 0x6b, 0x9b,
	0x4f, 0xbb, 0x66, 0xdd, 0x01, 0x76, 0x4c, 0xce, 0x3b, 0x5c, 0x2b, 0x61, 0x42, 0x10, 0x92, 0x0d,
	0x97, 0x2e, 0xe1, 0x45, 0x24, 0xb1, 0x65, 0xb4, 0x8f, 0x5d, 0x6e, 0x7e, 0xde, 0x33, 0x6d, 0xc7,
	0xd6, 0x96, 0xe9, 0xe7, 0x0b, 0x26, 0x3f, 0xb2, 0xea, 0xa6, 0x5b, 0xeb, 0xd9, 0xc7, 0xda, 0x0a,
	0xf1, 0x6f, 0xb5, 0xcc, 0x0e, 0xb0, 0x29, 0x08, 0x96, 0x51, 0x20, 0x72, 0x09, 0x48, 0xe2, 0x0b,
	0xd3, 0x35, 0x9f, 0xd6, 0x4d, 0xb3, 0x61, 0x83, 0x3c, 0x5a, 0x96, 0xa3, 0x31, 0x5c, 0x62, 0xd4,
	0xeb, 0xc0, 0x95, 0x0b, 0x36, 0x63, 0x81, 0x09, 0x55, 0xb6, 0x7f, 0x87, 0x95, 0x6b, 0xd1, 0x6f,
	0x63, 0xc0, 0xb8, 0x6c, 0xd3, 0x71, 0x9a, 0x30, 0x43, 0x46, 0x79, 0xd4, 0xb1, 0xc4, 0x6f, 0x23,
	0xe0, 0x99, 0x52, 0x1a, 0xfc, 0x65, 0xcc, 0x1a, 0x2b, 0x83, 0x2d, 0xd6, 0xcd, 0x26, 0xa2, 0x15,
	0xb6, 0xef, 0xb2, 0x22, 0x26, 0x9c, 0x78, 0x82, 0x35, 0xa3, 0xfe, 0x18, 0x16, 0x2e, 0xb3, 0x42,
	0xd3, 0x38, 0xd6, 0x72, 0xdb, 0x3f, 0x00, 0x72, 0xa0, 0x58, 0x0d, 0x1f, 0x75, 0x5c, 0x37, 0x0d,
	0xde, 0xb4, 0x90, 0x35, 0xa7, 0xe3, 0x36, 0x0d, 0x07, 0x9e, 0x84, 0xc4, 0xc5, 0x33, 0x42, 0x43,
	0x0c, 0x58, 0xfa, 0xdf, 0x2b, 0xe1, 0xef, 0xcd, 0x48, 0x51, 0xe0, 0xfd, 0xbd, 0x76, 0xcf, 0x0e,
	0xf9, 0x8a, 0x9c, 0x05, 0x08, 0xcb, 0x06, 0xa1, 0x5a, 0x46, 0xd3, 0x76, 0x41, 0xbe, 0x8e, 0xdb,
	0x3a, 0x40, 0xc7, 0x01, 0x82, 0xb5, 0x4d, 0xc3, 0x86, 0x63, 0x0a, 0x67, 0xe1, 0x4c, 0xee, 0xb0,
	0x1b, 0x07, 0xa0, 0x59, 0x70, 0x84, 0x4d, 0xa3, 0x15, 0x4f, 0xc8, 0xc3, 0x69, 0x58, 0xf8, 0x03,
	0x0f, 0xb3, 0xed, 0x58, 0xc0, 0x4e, 0x03, 0x0e, 0x07, 0x04, 0xee, 0x74, 0xba, 0x6e, 0xdb, 0xdd,
	0xb7, 0xda, 0x96, 0x7d, 0x18, 0x9e, 0x4c, 0x8f, 0xb7, 0x8d, 0x16, 0xa0, 0xb9, 0x92, 0x87, 0x65,
	0x01, 0xee, 0xc2, 0xb8, 0x0e, 0xa9, 0x9d, 0xed, 0xe2, 0xdd, 0x32, 0x87, 0xe3, 0xd9, 0x60, 0x15,
	0x04, 0xd7, 0x0c, 0xc7, 0x86, 0xb3, 0x84, 0xc3, 0x01, 0xc0, 0x61, 0x07, 0x94, 0xd3, 0x6a, 0xbb,
	0x78, 0xa3, 0xcc, 0x50, 0x90, 0xce, 0x93, 0x0e, 0x60, 0x34, 0x81, 0x8d, 0x0a, 0x1e, 0x0e, 0xb8,
	0x35, 0xee, 0x02, 0x2f, 0xf0, 0xef, 0xc3, 0x3d, 0x6d, 0x35, 0x05, 0xfa, 0x60, 0x4f, 0x5b, 0x4b,
	0x81, 0x76, 0xf7, 0xb4, 0xf5, 0x14, 0xe8, 0xd1, 0x9e, 0xb6, 0x81, 0xfa, 0x07, 0xba, 0x09, 0x8a,
	0x4d, 0x9a, 0xaf, 0x21, 0x4a, 0xbd, 0xc3, 0x39, 0xa8, 0x9f, 0x6b, 0xc3, 0x83, 0xa9, 0x6d, 0xa2,
	0x38, 0x6a, 0x1d, 0xe7, 0xd0, 0x75, 0x4c, 0xa3, 0x65, 0xa3, 0xf4, 0xc5, 0x84, 0x9e, 0x22, 0xf7,
	0xe1, 0x9e, 0x76, 0x03, 0x65, 0x51, 0xeb, 0x74, 0x1e, 0x83, 0x71, 0x09, 0x82, 0x37, 0x71, 0x33,
	0x80, 0x0e, 0x02, 0x10, 0x80, 0x5b, 0xb8, 0xaa, 0x6b, 0xb6, 0x8d, 0xa6, 0x73, 0x4c, 0x12, 0x68,
	0x6b, 0xb7, 0x49, 0xdb, 0xda, 0xc7, 0xa8, 0xa3, 0x92, 0xf6, 0x1d, 0xfc, 0xf1, 0x15, 0xbe, 0xcf,
	0xad, 0xb9, 0x1f, 0x68, 0x5b, 0xa9, 0x37, 0x7d, 0xbc, 0xa7, 0xdd, 0x45, 0x99, 0xd0, 0x39, 0x1e,
	0x74, 0x8c, 0xa6, 0x76, 0x0f, 0x99, 0xdc, 0xb7, 0x38, 0x68, 0xc7, 0xa1, 0xd1, 0xdc, 0x27, 0xa0,
	0x8d, 0x62, 0xf8, 0x46, 0xe6, 0x04, 0x88, 0xec, 0x7e, 0x8a, 0xe6, 0xde, 0x9e, 0xf6, 0x4d, 0xa4,
	0x49, 0x58, 0xc8, 0x89, 0xf6, 0x66, 0x0a, 0xe3, 0xa3, 0x3d, 0xed, 0x2d, 0xa4, 0x16, 0x61, 0xb8,
	0xfb, 0xbd, 0x66, 0x53, 0xe0, 0x3e, 0x40, 0x45, 0x8a, 0x27, 0xc4, 0x26, 0xbe, 0x95, 0x22, 0xf0,
	0xfd, 0x3d, 0xad, 0x8a, 0xe2, 0x68, 0x70, 0xe3, 0x89, 0x0b, 0x46, 0x5f, 0x33, 0x1d, 0xed, 0xed,
	0x68, 0xa3, 0x06, 0x6c, 0xf4, 0x1d, 0x5c, 0x21, 0x3d, 0x57, 0xfd, 0x10, 0x4d, 0x47, 0xfb, 0x8d,
	0xcc, 0x0d, 0xc0, 0x69, 0x7e, 0x1b, 0x83, 0x5e, 0xd2, 0xa9, 0x69, 0xdf, 0x41, 0x6a, 0xe0, 0x6d,
	0xcc, 0xba, 0x01, 0xb6, 0xf1, 0x2e, 0x62, 0x24, 0x0e, 0x73, 0x57, 0xfb, 0x2e, 0x32, 0x2a, 0xc8,
	0x21, 0x25, 0x71, 0x26, 0xdb, 0xc8, 0x15, 0x3c, 0xb9, 0x1d, 0xee, 0x9a, 0x47, 0x70, 0x22, 0xbf,
	0xa9, 0x88, 0x7f, 0x57, 0x7b, 0x4f, 0xe1, 0x71, 0x57, 0xfb, 0x1e, 0x9d, 0x68, 0xd3, 0x84, 0xf7,
	0xda, 0x87, 0x26, 0x6c, 0x61, 0x47, 0x99, 0x7e, 0xa4, 0xbd, 0xaf, 0x2c, 0x7d, 0xa4, 0x3d, 0x24,
	0x9d, 0x17, 0x73, 0x60, 0x06, 0xa8, 0x3c, 0x6d, 0xab, 0xa9, 0x7d, 0x10, 0x81, 0x6b, 0x2a, 0x78,
	0x17, 0x99, 0xc3, 0x31, 0xa9, 0x1b, 0x6c, 0xf7, 0xc8, 0xb4, 0xb5, 0x47, 0xc2, 0x3e, 0x1c, 0x60,
	0x96, 0xf6, 0xae, 0x7d, 0xa8, 0x6f, 0xb1, 0x9b, 0xb1, 0xce, 0x82, 0x70, 0xe5, 0xe7, 0x18, 0xda,
	0x1e, 0xae, 0x07, 0x5a, 0x44, 0xf2, 0xd0, 0x04, 0xb2, 0xb6, 0xad, 0x7d, 0x84, 0x3a, 0x09, 0x19,
	0x81, 0xd9, 0xed, 0xd8, 0x64, 0x8b, 0xda, 0xf7, 0xd1, 0x97, 0x1c, 0x1a, 0xe0, 0x48, 0x38, 0x5a,
	0x62, 0x43, 0xc8, 0xa6, 0xa1, 0x7d, 0x8c, 0xcb, 0xc1, 0x49, 0x72, 0xeb, 0xe0, 0x30, 0xb2, 0xda,
	0x1f, 0xe0, 0xf2, 0x16, 0xe8, 0x29, 0x51, 0xac, 0xf7, 0x1c, 0xed, 0x13, 0x72, 0x7e, 0xc2, 0x29,
	0x68, 0x9f, 0x6e, 0xff, 0x53, 0x09, 0xd2, 0xea, 0xd4, 0x4d, 0x17, 0x1c, 0x59, 0xe8, 0x82, 0x7b,
	0x6d, 0xf5, 0x87, 0x64, 0xe0, 0x40, 0xe0, 0xd4, 0x5d, 0x4c, 0x67, 0xc0, 0xe5, 0x08, 0x67, 0x4c,
	0xe5, 0x1e, 0x42, 0x81, 0xeb, 0x2e, 0xef, 0x1c, 0x70, 0xf0, 0xba, 0xe0, 0x99, 0xd0, 0xea, 0x00,
	0x48, 0x26, 0x82, 0x07, 0x23, 0xbd, 0x6a, 0x01, 0x77, 0x1f, 0x79, 0x55, 0x50, 0x23, 0xc7, 0xed,
	0x36, 0x8d, 0x3a, 0x25, 0x39, 0x40, 0xbd, 0xd1, 0xeb, 0x36, 0x41, 0x15, 0x1c, 0x13, 0xb5, 0xcb,
	0xc2, 0x58, 0xa6, 0xdf, 0x65, 0xb7, 0x62, 0xa8, 0x03, 0x7e, 0xcd, 0x16, 0xaf, 0x07, 0x3f, 0x85,
	0x3f, 0x64, 0x43, 0x1e, 0xc8, 0xd3, 0xf0, 0x06, 0x39, 0x29, 0x40, 0x8f, 0x42, 0x4d, 0xbd, 0xde,
	0xe9, 0x81, 0x03, 0xb3, 0x1d, 0x58, 0x0a, 0x8e, 0xea, 0x01, 0xbb, 0x1f, 0x4e, 0xa1, 0x03, 0x07,
	0x96, 0x8e, 0xdd, 0x7a, 0xa7, 0x55, 0xb3, 0xda, 0x22, 0xba, 0x95, 0x91, 0x60, 0x84, 0x81, 0x3b,
	0x6a, 0x80, 0xf3, 0x02, 0xae, 0x54, 0x18, 0x86, 0x1b, 0xf0, 0x61, 0x2a, 0x14, 0xfe, 0x9c, 0xe3,
	0xae, 0x09, 0x6e, 0x0c, 0xd4, 0x22, 0x84, 0xca, 0x02, 0x18, 0x48, 0xac, 0xe1, 0x11, 0x84, 0x60,
	0x52, 0x58, 0xf2, 0x64, 0x11, 0x84, 0x18, 0xdf, 0xd0, 0xef, 0xb3, 0xad, 0x10, 0x24, 0x2b, 0x69,
	0x13, 0xa4, 0x24, 0x28, 0x6b, 0x6a, 0xc0, 0xee, 0x72, 0x3c, 0x18, 0xb3, 0x01, 0x81, 0x6e, 0x53,
	0xe5, 0x98, 0xf7, 0xe8, 0xc4, 0x75, 0x55, 0x04, 0x4f, 0xc0, 0xe5, 0x9a, 0x42, 0x02, 0x3d, 0x1b,
	0xfc, 0xdb, 0xdb, 0xec, 0x2d, 0xc9, 0x18, 0x4a, 0x1e, 0x7f, 0x10, 0xea, 0x82, 0xbd, 0xb9, 0x35,
	0xbb, 0x8b, 0x9b, 0x73, 0xc0, 0xef, 0x81, 0xcb, 0x83, 0xbd, 0x49, 0xa4, 0xf8, 0x77, 0xa2, 0xb7,
	0x70, 0x6f, 0xc0, 0x57, 0xcb, 0x12, 0x59, 0x81, 0x0c, 0xab, 0xb7, 0xf1, 0x65, 0x70, 0xea, 0x18,
	0x6a, 0xe1, 0x38, 0x9f, 0x58, 0xa0, 0xf8, 0x74, 0x24, 0x36, 0xf8, 0x40, 0x98, 0xe2, 0xe6, 0x8f,
	0x44, 0x26, 0x50, 0xc3, 0x18, 0x7f, 0xd0, 0x83, 0x10, 0x08, 0x2a, 0xb3, 0x25, 0xa6, 0x30, 0x1e,
	0x36, 0x42, 0x65, 0xda, 0x07, 0x2d, 0x03, 0x82, 0x77, 0x29, 0x17, 0xa6, 0x9d, 0xb8, 0x61, 0xfa,
	0x7b, 0x8f, 0x34, 0xb6, 0x47, 0xf1, 0x1c, 0x3c, 0x22, 0x0c, 0x10, 0xb9, 0x07, 0x2e, 0xea, 0x3e,
	0x0e, 0x64, 0x6e, 0xa0, 0x7d, 0x13, 0x43, 0x7c, 0xd4, 0xbb, 0xa2, 0xf4, 0x9a, 0xb2, 0x81, 0x37,
	0xb2, 0xfa, 0x11, 0xf4, 0x2b, 0x48, 0x9a, 0x57, 0x7a, 0x14, 0xdb, 0x35, 0x30, 0xa0, 0x64, 0x37,
	0x0b, 0x63, 0x3c, 0xc8, 0x10, 0x88, 0x40, 0xa4, 0x31, 0x9f, 0x9a, 0x60, 0x41, 0x64, 0x0b, 0x39,
	0x0a, 0xf4, 0x34, 0x46, 0xee, 0x41, 0x8d, 0xba, 0x20, 0x68, 0xa4, 0xf1, 0x13, 0xb6, 0x4c, 0x34,
	0x6a, 0xaf, 0x31, 0x80, 0xc3, 0xbe, 0xd1, 0x4f, 0xd2, 0x6f, 0x30, 0xe1, 0x59, 0xb0, 0x01, 0xab,
	0x41, 0x01, 0x68, 0x88, 0x6e, 0x80, 0x5c, 0x70, 0x5e, 0x82, 0xc8, 0x1a, 0x04, 0xa8, 0x40, 0x96,
	0x75, 0xec, 0xca, 0x4c, 0x45, 0x00, 0x8b, 0x14, 0xa3, 0x8e, 0x5d, 0xcc, 0x58, 0x04, 0xa4, 0xb4,
	0xfd, 0xb3, 0x5c, 0x98, 0x43, 0x60, 0x16, 0x82, 0x3b, 0x6b, 0x41, 0x28, 0x6f, 0xf5, 0x5a, 0xe1,
	0xaf, 0x37, 0xdf, 0x20, 0x98, 0xf1, 0x54, 0x85, 0x89, 0x2f, 0xc1, 0x24, 0x5e, 0x6c, 0xe4, 0x79,
	0xf1, 0x81, 0xd8, 0xd3, 0x14, 0xb8, 0x80, 0x14, 0x84, 0xe3, 0xc5, 0x08, 0xea, 0x18, 0xdc, 0x01,
	0x56, 0x80, 0xe5, 0xa6, 0xa1, 0x82, 0x4a, 0xdb, 0x7f, 0x96, 0x0b, 0xaf, 0x69, 0x14, 0x21, 0x52,
	0x10, 0x6d, 0x75, 0xc1, 0xa4, 0xc9, 0xd0, 0xde, 0xc0, 0xc3, 0x41, 0x4f, 0x8d, 0x92, 0x40, 0xb9,
	0xe2, 0xa3, 0xd0, 0x74, 0xf9, 0x7a, 0xa1, 0x7d, 0x48, 0x32, 0x14, 0x05, 0x88, 0x5b, 0x82, 0x1b,
	0xa6, 0x5d, 0xe7, 0x56, 0xd7, 0x11, 0x09, 0x27, 0xc0, 0xa5, 0xba, 0xa8, 0x70, 0x4a, 0x39, 0x25,
	0xbc, 0x65, 0x3a, 0x06, 0xa5, 0xb7, 0x4b, 0xdb, 0x0e, 0x7e, 0x86, 0x0e, 0x55, 0x9a, 0xc2, 0x1a,
	0xc6, 0xe1, 0x8e, 0xcb, 0x3b, 0xcd, 0x66, 0xaf, 0x2b, 0xd2, 0x34, 0x7c, 0x06, 0x69, 0xf7, 0xba,
	0xa8, 0xb4, 0x64, 0x6c, 0xc0, 0xe5, 0x3d, 0x76, 0x3b, 0x01, 0x37, 0x8e, 0x0e, 0xe4, 0x5c, 0x7e,
	0xfb, 0x91, 0xf8, 0xc6, 0x42, 0x29, 0x09, 0x30, 0x47, 0x6c, 0x18, 0xc7, 0xb6, 0xd8, 0xe9, 0x21,
	0xe4, 0x52, 0x36, 0xd0, 0x00, 0x5d, 0x05, 0x79, 0xf7, 0x20, 0x09, 0xd4, 0xf2, 0x27, 0x4b, 0x54,
	0xea, 0x3e, 0xfa, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x11, 0xf0, 0xce, 0xa9, 0x40, 0x00,
	0x00,
}
